27 OTHER PHP FILES
================================================================================
Generated on: 2025-09-02 18:00:53
Project Path: D:\smk_monitoring_app

------------------------------------------------------------
FILE: app\Events\AbsensiTerlambatEvent.php
Path: D:\smk_monitoring_app\app\Events\AbsensiTerlambatEvent.php
Size: 997 bytes
Last Modified: 09/01/2025 13:56:05
------------------------------------------------------------
<?php

namespace App\Events;

use App\Models\AbsensiSiswa;
use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class AbsensiTerlambatEvent implements ShouldBroadcast
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    public function __construct(public AbsensiSiswa $absensi) {}

    public function broadcastOn()
    {
        return new PrivateChannel('absensi.terlambat.' . $this->absensi->siswa_id);
    }

    public function broadcastWith()
    {
        return [
            'title' => 'Absensi Terlambat',
            'message' => 'Siswa ' . $this->absensi->siswa->name . ' terlambat masuk',
            'type' => 'warning',
            'url' => '/absensi/' . $this->absensi->id,
            'timestamp' => now()->toIso8601String()
        ];
    }
}



------------------------------------------------------------
FILE: app\Http\Controllers\Api\AbsensiGuruController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Api\AbsensiGuruController.php
Size: 5.23 KB
Last Modified: 09/02/2025 17:26:48
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Api;

use App\Models\AbsensiGuru;
use App\Models\Zona;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;

class AbsensiGuruController extends Controller
{
    /**
     * Absensi masuk guru
     */
    public function absenMasuk(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'latitude' => 'required|numeric',
            'longitude' => 'required|numeric',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'message' => 'Validasi gagal',
                'errors' => $validator->errors()
            ], 422);
        }

        // Ambil zona absensi yang aktif
        $zona = Zona::where('is_active', true)->first();

        if (!$zona) {
            return response()->json([
                'message' => 'Zona absensi belum diatur oleh tim IT'
            ], 400);
        }

        // Hitung jarak
        $distance = $this->calculateDistance(
            $request->latitude,
            $request->longitude,
            $zona->latitude,
            $zona->longitude
        );

        // Cek radius
        if ($distance > $zona->radius) {
            return response()->json([
                'message' => 'Anda berada di luar radius absensi',
                'distance' => round($distance, 2),
                'radius' => $zona->radius
            ], 403);
        }

        // Cek apakah sudah absen masuk hari ini
        $absensiHariIni = AbsensiGuru::where('user_id', Auth::id())
            ->whereDate('tanggal', now()->format('Y-m-d'))
            ->first();

        if ($absensiHariIni && $absensiHariIni->jam_masuk) {
            return response()->json([
                'message' => 'Anda sudah melakukan absensi masuk hari ini'
            ], 400);
        }

        // Buat atau update absensi
        if ($absensiHariIni) {
            $absensiHariIni->update([
                'jam_masuk' => now(),
                'latitude_masuk' => $request->latitude,
                'longitude_masuk' => $request->longitude
            ]);
            $absensi = $absensiHariIni;
        } else {
            $absensi = AbsensiGuru::create([
                'user_id' => Auth::id(),
                'tanggal' => now()->format('Y-m-d'),
                'jam_masuk' => now(),
                'latitude_masuk' => $request->latitude,
                'longitude_masuk' => $request->longitude
            ]);
        }

        return response()->json([
            'message' => 'Absensi masuk berhasil',
            'data' => $absensi
        ]);
    }

    /**
     * Absensi pulang guru
     */
    public function absenPulang(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'latitude' => 'required|numeric',
            'longitude' => 'required|numeric',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'message' => 'Validasi gagal',
                'errors' => $validator->errors()
            ], 422);
        }

        // Ambil zona absensi yang aktif
        $zona = Zona::where('is_active', true)->first();

        if (!$zona) {
            return response()->json([
                'message' => 'Zona absensi belum diatur oleh tim IT'
            ], 400);
        }

        // Hitung jarak
        $distance = $this->calculateDistance(
            $request->latitude,
            $request->longitude,
            $zona->latitude,
            $zona->longitude
        );

        // Cek radius
        if ($distance > $zona->radius) {
            return response()->json([
                'message' => 'Anda berada di luar radius absensi',
                'distance' => round($distance, 2),
                'radius' => $zona->radius
            ], 403);
        }

        // Cek absensi hari ini
        $absensiHariIni = AbsensiGuru::where('user_id', Auth::id())
            ->whereDate('tanggal', now()->format('Y-m-d'))
            ->first();

        if (!$absensiHariIni || !$absensiHariIni->jam_masuk) {
            return response()->json([
                'message' => 'Anda belum melakukan absensi masuk hari ini'
            ], 400);
        }

        if ($absensiHariIni->jam_pulang) {
            return response()->json([
                'message' => 'Anda sudah melakukan absensi pulang hari ini'
            ], 400);
        }

        // Update absensi pulang
        $absensiHariIni->update([
            'jam_pulang' => now(),
            'latitude_pulang' => $request->latitude,
            'longitude_pulang' => $request->longitude
        ]);

        return response()->json([
            'message' => 'Absensi pulang berhasil',
            'data' => $absensiHariIni
        ]);
    }

    /**
     * Hitung jarak antara dua titik koordinat
     */
    private function calculateDistance($lat1, $lon1, $lat2, $lon2)
    {
        $earthRadius = 6371; // km

        $dLat = deg2rad($lat2 - $lat1);
        $dLon = deg2rad($lon2 - $lon1);

        $a = sin($dLat / 2) * sin($dLat / 2) +
            cos(deg2rad($lat1)) * cos(deg2rad($lat2)) *
            sin($dLon / 2) * sin($dLon / 2);

        $c = 2 * atan2(sqrt($a), sqrt(1 - $a));
        $distance = $earthRadius * $c;

        return $distance * 1000; // meter
    }
}


------------------------------------------------------------
FILE: app\Http\Controllers\Api\AbsensiSiswaController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Api\AbsensiSiswaController.php
Size: 2.73 KB
Last Modified: 09/02/2025 17:26:25
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Api;

use App\Models\AbsensiSiswa;
use App\Models\Zona;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Validator;

class AbsensiSiswaController extends Controller
{
    /**
     * Absensi siswa dengan foto dan lokasi
     */
    public function absenSiswa(Request $request)
    {
        // Validasi input
        $validator = Validator::make($request->all(), [
            'foto' => 'required|image|mimes:jpeg,png,jpg|max:2048',
            'latitude' => 'required|numeric',
            'longitude' => 'required|numeric',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'message' => 'Validasi gagal',
                'errors' => $validator->errors()
            ], 422);
        }

        // Ambil zona absensi yang aktif
        $zona = Zona::where('is_active', true)->first();

        if (!$zona) {
            return response()->json([
                'message' => 'Zona absensi belum diatur oleh tim IT'
            ], 400);
        }

        // Hitung jarak dari koordinat user ke pusat zona
        $distance = $this->calculateDistance(
            $request->latitude,
            $request->longitude,
            $zona->latitude,
            $zona->longitude
        );

        // Cek apakah dalam radius
        if ($distance > $zona->radius) {
            return response()->json([
                'message' => 'Anda berada di luar radius absensi',
                'distance' => round($distance, 2),
                'radius' => $zona->radius
            ], 403);
        }

        // Simpan foto
        $fotoPath = $request->file('foto')->store('absensi/siswa', 'public');

        // Simpan absensi
        $absensi = AbsensiSiswa::create([
            'user_id' => Auth::id(),
            'tanggal' => now()->format('Y-m-d'),
            'jam_masuk' => now(),
            'foto' => $fotoPath,
            'latitude' => $request->latitude,
            'longitude' => $request->longitude,
            'status' => 'hadir'
        ]);

        return response()->json([
            'message' => 'Absensi berhasil',
            'data' => $absensi
        ]);
    }

    /**
     * Hitung jarak antara dua titik koordinat
     */
    private function calculateDistance($lat1, $lon1, $lat2, $lon2)
    {
        $earthRadius = 6371; // km

        $dLat = deg2rad($lat2 - $lat1);
        $dLon = deg2rad($lon2 - $lon1);

        $a = sin($dLat / 2) * sin($dLat / 2) +
            cos(deg2rad($lat1)) * cos(deg2rad($lat2)) *
            sin($dLon / 2) * sin($dLon / 2);

        $c = 2 * atan2(sqrt($a), sqrt(1 - $a));
        $distance = $earthRadius * $c;

        return $distance * 1000; // meter
    }
}


------------------------------------------------------------
FILE: app\Http\Controllers\Api\CatatanPelanggaranController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Api\CatatanPelanggaranController.php
Size: 3.86 KB
Last Modified: 09/02/2025 17:27:00
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Api;

use App\Models\CatatanPelanggaran;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;

class CatatanPelanggaranController extends Controller
{
    /**
     * Tampilkan semua catatan pelanggaran
     */
    public function index(Request $request)
    {
        $query = CatatanPelanggaran::with('siswa');

        // Filter berdasarkan kelas jika role guru
        if (Auth::user()->hasRole('guru')) {
            $kelasId = $request->query('kelas_id');
            if ($kelasId) {
                $siswaIds = User::whereHas('kelas', function ($query) use ($kelasId) {
                    $query->where('kelas_id', $kelasId);
                })->pluck('id');

                $query->whereIn('user_id', $siswaIds);
            }
        }

        // Filter berdasarkan tanggal
        if ($request->has('tanggal')) {
            $query->whereDate('tanggal', $request->tanggal);
        }

        $catatan = $query->orderBy('tanggal', 'desc')->paginate(10);

        return response()->json($catatan);
    }

    /**
     * Tambah catatan pelanggaran baru
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'user_id' => 'required|exists:users,id',
            'tanggal' => 'required|date',
            'jenis_pelanggaran' => 'required|string|max:255',
            'deskripsi' => 'required|string',
            'tingkat_keparahan' => 'required|in:ringan,sedang,berat',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'message' => 'Validasi gagal',
                'errors' => $validator->errors()
            ], 422);
        }

        // Pastikan user_id adalah siswa
        $siswa = User::find($request->user_id);
        if (!$siswa->hasRole('siswa')) {
            return response()->json([
                'message' => 'User yang dipilih bukan siswa'
            ], 400);
        }

        $catatan = CatatanPelanggaran::create([
            'user_id' => $request->user_id,
            'tanggal' => $request->tanggal,
            'jenis_pelanggaran' => $request->jenis_pelanggaran,
            'deskripsi' => $request->deskripsi,
            'tingkat_keparahan' => $request->tingkat_keparahan,
            'guru_id' => Auth::id(),
        ]);

        return response()->json([
            'message' => 'Catatan pelanggaran berhasil ditambahkan',
            'data' => $catatan
        ], 201);
    }

    /**
     * Update catatan pelanggaran
     */
    public function update(Request $request, $id)
    {
        $catatan = CatatanPelanggaran::find($id);

        if (!$catatan) {
            return response()->json(['message' => 'Catatan tidak ditemukan'], 404);
        }

        // Hanya guru yang membuat atau BK yang bisa mengedit
        if ($catatan->guru_id != Auth::id() && !Auth::user()->hasRole('bk')) {
            return response()->json(['message' => 'Anda tidak memiliki izin untuk mengedit catatan ini'], 403);
        }

        $validator = Validator::make($request->all(), [
            'tanggal' => 'sometimes|required|date',
            'jenis_pelanggaran' => 'sometimes|required|string|max:255',
            'deskripsi' => 'sometimes|required|string',
            'tingkat_keparahan' => 'sometimes|required|in:ringan,sedang,berat',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'message' => 'Validasi gagal',
                'errors' => $validator->errors()
            ], 422);
        }

        $catatan->update($request->only([
            'tanggal',
            'jenis_pelanggaran',
            'deskripsi',
            'tingkat_keparahan'
        ]));

        return response()->json([
            'message' => 'Catatan pelanggaran berhasil diperbarui',
            'data' => $catatan
        ]);
    }
}


------------------------------------------------------------
FILE: app\Http\Controllers\Api\DashboardController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Api\DashboardController.php
Size: 7.82 KB
Last Modified: 09/02/2025 17:28:19
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Api;

use App\Models\AbsensiGuru;
use App\Models\AbsensiSiswa;
use App\Models\CatatanPelanggaran;
use App\Models\Jadwal;
use App\Models\Zona;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class DashboardController extends Controller
{
    /**
     * Tampilkan data dashboard berdasarkan role
     */
    public function index()
    {
        $user = Auth::user();
        $role = $user->roles->first()->name ?? 'siswa';

        switch ($role) {
            case 'siswa':
                return $this->dashboardSiswa($user);
            case 'guru':
                return $this->dashboardGuru($user);
            case 'bk':
                return $this->dashboardBk($user);
            case 'it':
                return $this->dashboardIt($user);
            default:
                return $this->dashboardSiswa($user);
        }
    }

    private function dashboardSiswa($user)
    {
        // Data absensi hari ini
        $absensiHariIni = AbsensiSiswa::where('user_id', $user->id)
            ->whereDate('tanggal', now()->format('Y-m-d'))
            ->first();

        // Jadwal hari ini
        $hariIni = strtolower(now()->format('l'));
        $hariMap = [
            'monday' => 'senin',
            'tuesday' => 'selasa',
            'wednesday' => 'rabu',
            'thursday' => 'kamis',
            'friday' => 'jumat',
            'saturday' => 'sabtu'
        ];
        $hari = $hariMap[$hariIni] ?? 'senin';

        $jadwalHariIni = Jadwal::whereHas('kelas.siswa', function ($query) use ($user) {
            $query->where('user_id', $user->id);
        })
            ->where('hari', $hari)
            ->with('guru', 'kelas')
            ->orderBy('jam_mulai')
            ->get();

        // Pelanggaran terbaru
        $pelanggaranTerbaru = CatatanPelanggaran::where('user_id', $user->id)
            ->orderBy('tanggal', 'desc')
            ->take(5)
            ->get();

        return response()->json([
            'role' => 'siswa',
            'absensi' => $absensiHariIni,
            'jadwal_hari_ini' => $jadwalHariIni,
            'pelanggaran_terbaru' => $pelanggaranTerbaru,
            'total_absensi_hadir' => AbsensiSiswa::where('user_id', $user->id)
                ->where('status', 'hadir')
                ->count(),
            'total_absensi_izin' => AbsensiSiswa::where('user_id', $user->id)
                ->where('status', 'izin')
                ->count(),
            'total_absensi_sakit' => AbsensiSiswa::where('user_id', $user->id)
                ->where('status', 'sakit')
                ->count(),
            'total_absensi_alpha' => AbsensiSiswa::where('user_id', $user->id)
                ->where('status', 'alpha')
                ->count(),
        ]);
    }

    private function dashboardGuru($user)
    {
        // Absensi guru hari ini
        $absensiHariIni = AbsensiGuru::where('user_id', $user->id)
            ->whereDate('tanggal', now()->format('Y-m-d'))
            ->first();

        // Jadwal mengajar hari ini
        $hariIni = strtolower(now()->format('l'));
        $hariMap = [
            'monday' => 'senin',
            'tuesday' => 'selasa',
            'wednesday' => 'rabu',
            'thursday' => 'kamis',
            'friday' => 'jumat',
            'saturday' => 'sabtu'
        ];
        $hari = $hariMap[$hariIni] ?? 'senin';

        $jadwalHariIni = Jadwal::where('guru_id', $user->id)
            ->where('hari', $hari)
            ->with('kelas')
            ->orderBy('jam_mulai')
            ->get();

        // Absensi siswa hari ini
        $absensiSiswaHariIni = AbsensiSiswa::whereDate('tanggal', now()->format('Y-m-d'))
            ->whereHas('user.kelas', function ($query) use ($user) {
                $query->whereHas('jadwal', function ($q) use ($user) {
                    $q->where('guru_id', $user->id);
                });
            })
            ->with('user')
            ->get();

        return response()->json([
            'role' => 'guru',
            'absensi' => $absensiHariIni,
            'jadwal_hari_ini' => $jadwalHariIni,
            'absensi_siswa_hari_ini' => $absensiSiswaHariIni,
            'total_jadwal_mengajar' => Jadwal::where('guru_id', $user->id)->count(),
            'total_siswa_mengajar' => \App\Models\User::whereHas('kelas.jadwal', function ($query) use ($user) {
                $query->where('guru_id', $user->id);
            })->count(),
        ]);
    }

    private function dashboardBk($user)
    {
        // Pelanggaran hari ini
        $pelanggaranHariIni = CatatanPelanggaran::whereDate('tanggal', now()->format('Y-m-d'))
            ->with('siswa', 'guru')
            ->get();

        // Pelanggaran berdasarkan tingkat keparahan
        $pelanggaranRingan = CatatanPelanggaran::where('tingkat_keparahan', 'ringan')->count();
        $pelanggaranSedang = CatatanPelanggaran::where('tingkat_keparahan', 'sedang')->count();
        $pelanggaranBerat = CatatanPelanggaran::where('tingkat_keparahan', 'berat')->count();

        // Statistik pelanggaran per kelas
        $statistikPerKelas = \DB::table('catatan_pelanggaran')
            ->join('users', 'catatan_pelanggaran.user_id', '=', 'users.id')
            ->join('kelas_user', 'users.id', '=', 'kelas_user.user_id')
            ->join('kelas', 'kelas_user.kelas_id', '=', 'kelas.id')
            ->select('kelas.nama_kelas', \DB::raw('count(*) as total'))
            ->groupBy('kelas.nama_kelas')
            ->get();

        return response()->json([
            'role' => 'bk',
            'pelanggaran_hari_ini' => $pelanggaranHariIni,
            'total_pelanggaran' => CatatanPelanggaran::count(),
            'pelanggaran_ringan' => $pelanggaranRingan,
            'pelanggaran_sedang' => $pelanggaranSedang,
            'pelanggaran_berat' => $pelanggaranBerat,
            'statistik_per_kelas' => $statistikPerKelas,
            'total_siswa_bermasalah' => CatatanPelanggaran::distinct('user_id')->count('user_id'),
        ]);
    }

    private function dashboardIt($user)
    {
        // Zona absensi
        $zonaAktif = Zona::where('is_active', true)->first();
        $totalZona = Zona::count();

        // Statistik absensi
        $totalAbsensiSiswa = AbsensiSiswa::count();
        $totalAbsensiGuru = AbsensiGuru::count();

        $absensiHariIniSiswa = AbsensiSiswa::whereDate('tanggal', now()->format('Y-m-d'))->count();
        $absensiHariIniGuru = AbsensiGuru::whereDate('tanggal', now()->format('Y-m-d'))->count();

        // Statistik user
        $totalUser = \App\Models\User::count();
        $totalSiswa = \App\Models\User::role('siswa')->count();
        $totalGuru = \App\Models\User::role('guru')->count();
        $totalBk = \App\Models\User::role('bk')->count();

        // Jadwal
        $totalJadwal = Jadwal::count();
        $jadwalPerKelas = Jadwal::with('kelas')->get()
            ->groupBy('kelas_id')
            ->map(function ($jadwal, $kelas_id) {
                return [
                    'kelas_id' => $kelas_id,
                    'total_jadwal' => $jadwal->count(),
                    'hari' => $jadwal->pluck('hari')->unique()->values()
                ];
            });

        return response()->json([
            'role' => 'it',
            'zona_aktif' => $zonaAktif,
            'total_zona' => $totalZona,
            'statistik_absensi' => [
                'total_siswa' => $totalAbsensiSiswa,
                'total_guru' => $totalAbsensiGuru,
                'hari_ini_siswa' => $absensiHariIniSiswa,
                'hari_ini_guru' => $absensiHariIniGuru,
            ],
            'statistik_user' => [
                'total' => $totalUser,
                'siswa' => $totalSiswa,
                'guru' => $totalGuru,
                'bk' => $totalBk,
            ],
            'statistik_jadwal' => [
                'total' => $totalJadwal,
                'per_kelas' => $jadwalPerKelas,
            ],
        ]);
    }
}


------------------------------------------------------------
FILE: app\Http\Controllers\Api\JadwalController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Api\JadwalController.php
Size: 1.93 KB
Last Modified: 09/02/2025 17:28:06
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Api;

use App\Models\Jadwal;
use App\Models\Kelas;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class JadwalController extends Controller
{
    /**
     * Tampilkan semua jadwal
     */
    public function index(Request $request)
    {
        $query = Jadwal::with('kelas', 'guru');

        // Filter berdasarkan kelas jika role guru atau siswa
        if ($request->has('kelas_id')) {
            $query->where('kelas_id', $request->kelas_id);
        }

        // Filter berdasarkan hari
        if ($request->has('hari')) {
            $query->where('hari', $request->hari);
        }

        $jadwal = $query->orderBy('hari')->orderBy('jam_mulai')->get();

        return response()->json($jadwal);
    }

    /**
     * Tambah jadwal baru
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'kelas_id' => 'required|exists:kelas,id',
            'guru_id' => 'required|exists:users,id',
            'mata_pelajaran' => 'required|string|max:255',
            'hari' => 'required|in:senin,selasa,rabu,kamis,jumat,sabtu',
            'jam_mulai' => 'required|date_format:H:i',
            'jam_selesai' => 'required|date_format:H:i|after:jam_mulai',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'message' => 'Validasi gagal',
                'errors' => $validator->errors()
            ], 422);
        }

        // Pastikan guru_id adalah guru
        $guru = \App\Models\User::find($request->guru_id);
        if (!$guru->hasRole('guru')) {
            return response()->json([
                'message' => 'User yang dipilih bukan guru'
            ], 400);
        }

        $jadwal = Jadwal::create($request->all());

        return response()->json([
            'message' => 'Jadwal berhasil ditambahkan',
            'data' => $jadwal
        ], 201);
    }
}


------------------------------------------------------------
FILE: app\Http\Controllers\Api\NotificationController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Api\NotificationController.php
Size: 1.22 KB
Last Modified: 09/01/2025 13:54:43
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Api;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Notifications\DatabaseNotification;

class NotificationController extends Controller
{
    public function unread()
    {
        $notifications = auth()->user()->unreadNotifications()->latest()->get();

        return response()->json($notifications->map(function ($notification) {
            return [
                'id' => $notification->id,
                'type' => class_basename($notification->type),
                'data' => $notification->data,
                'read_at' => $notification->read_at,
                'created_at' => $notification->created_at->toIso8601String()
            ];
        }));
    }

    public function markAsRead($id)
    {
        $notification = auth()->user()->notifications()->findOrFail($id);
        $notification->markAsRead();

        return response()->json([
            'message' => 'Notifikasi ditandai sebagai telah dibaca'
        ]);
    }

    public function markAllAsRead()
    {
        auth()->user()->unreadNotifications->markAsRead();

        return response()->json([
            'message' => 'Semua notifikasi ditandai sebagai telah dibaca'
        ]);
    }
}


------------------------------------------------------------
FILE: app\Http\Controllers\Api\ZonaController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Api\ZonaController.php
Size: 2.44 KB
Last Modified: 09/02/2025 17:27:52
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Api;

use App\Models\Zona;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class ZonaController extends Controller
{
    /**
     * Tampilkan semua zona
     */
    public function index()
    {
        $zona = Zona::orderBy('nama', 'asc')->get();
        return response()->json($zona);
    }

    /**
     * Tambah zona baru
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'nama' => 'required|string|max:255',
            'latitude' => 'required|numeric',
            'longitude' => 'required|numeric',
            'radius' => 'required|numeric|min:10|max:500',
            'is_active' => 'boolean'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'message' => 'Validasi gagal',
                'errors' => $validator->errors()
            ], 422);
        }

        // Jika zona diaktifkan, nonaktifkan zona lainnya
        if ($request->is_active) {
            Zona::where('is_active', true)->update(['is_active' => false]);
        }

        $zona = Zona::create($request->all());

        return response()->json([
            'message' => 'Zona berhasil ditambahkan',
            'data' => $zona
        ], 201);
    }

    /**
     * Update zona
     */
    public function update(Request $request, $id)
    {
        $zona = Zona::find($id);

        if (!$zona) {
            return response()->json(['message' => 'Zona tidak ditemukan'], 404);
        }

        $validator = Validator::make($request->all(), [
            'nama' => 'sometimes|required|string|max:255',
            'latitude' => 'sometimes|required|numeric',
            'longitude' => 'sometimes|required|numeric',
            'radius' => 'sometimes|required|numeric|min:10|max:500',
            'is_active' => 'boolean'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'message' => 'Validasi gagal',
                'errors' => $validator->errors()
            ], 422);
        }

        // Jika zona diaktifkan, nonaktifkan zona lainnya
        if ($request->has('is_active') && $request->is_active) {
            Zona::where('is_active', true)->update(['is_active' => false]);
        }

        $zona->update($request->all());

        return response()->json([
            'message' => 'Zona berhasil diperbarui',
            'data' => $zona
        ]);
    }
}


------------------------------------------------------------
FILE: app\Http\Controllers\Auth\AuthenticatedSessionController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Auth\AuthenticatedSessionController.php
Size: 1.55 KB
Last Modified: 09/01/2025 17:55:40
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class AuthenticatedSessionController extends Controller
{
    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): JsonResponse|RedirectResponse
    {
        $request->authenticate();

        // HANYA gunakan session untuk permintaan web
        if (!$request->wantsJson()) {
            $request->session()->regenerate();
        }

        // Jika permintaan ingin respons JSON (API request)
        if ($request->wantsJson()) {
            return response()->json([
                'token' => $request->user()->createToken('api-token')->plainTextToken
            ]);
        }

        return redirect()->intended(route('dashboard', absolute: false));
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): JsonResponse|RedirectResponse
    {
        Auth::guard('web')->logout();

        // HANYA gunakan session untuk permintaan web
        if (!$request->wantsJson()) {
            $request->session()->invalidate();
            $request->session()->regenerateToken();
        }

        // Jika permintaan ingin respons JSON (API request)
        if ($request->wantsJson()) {
            return response()->json(['message' => 'Logged out successfully']);
        }

        return redirect('/');
    }
}



------------------------------------------------------------
FILE: app\Http\Controllers\Auth\ConfirmablePasswordController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Auth\ConfirmablePasswordController.php
Size: 1.03 KB
Last Modified: 08/11/2025 12:26:00
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use Inertia\Inertia;
use Inertia\Response;

class ConfirmablePasswordController extends Controller
{
    /**
     * Show the confirm password view.
     */
    public function show(): Response
    {
        return Inertia::render('Auth/ConfirmPassword');
    }

    /**
     * Confirm the user's password.
     */
    public function store(Request $request): RedirectResponse
    {
        if (! Auth::guard('web')->validate([
            'email' => $request->user()->email,
            'password' => $request->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }

        $request->session()->put('auth.password_confirmed_at', time());

        return redirect()->intended(route('dashboard', absolute: false));
    }
}



------------------------------------------------------------
FILE: app\Http\Controllers\Auth\EmailVerificationNotificationController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Auth\EmailVerificationNotificationController.php
Size: 662 bytes
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): JsonResponse|RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended('/dashboard');
        }

        $request->user()->sendEmailVerificationNotification();

        return response()->json(['status' => 'verification-link-sent']);
    }
}



------------------------------------------------------------
FILE: app\Http\Controllers\Auth\EmailVerificationPromptController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Auth\EmailVerificationPromptController.php
Size: 628 bytes
Last Modified: 08/11/2025 12:26:00
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Inertia\Response;

class EmailVerificationPromptController extends Controller
{
    /**
     * Display the email verification prompt.
     */
    public function __invoke(Request $request): RedirectResponse|Response
    {
        return $request->user()->hasVerifiedEmail()
                    ? redirect()->intended(route('dashboard', absolute: false))
                    : Inertia::render('Auth/VerifyEmail', ['status' => session('status')]);
    }
}



------------------------------------------------------------
FILE: app\Http\Controllers\Auth\NewPasswordController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Auth\NewPasswordController.php
Size: 1.71 KB
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Illuminate\Validation\ValidationException;

class NewPasswordController extends Controller
{
    /**
     * Handle an incoming new password request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): JsonResponse
    {
        $request->validate([
            'token' => ['required'],
            'email' => ['required', 'email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function ($user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->string('password')),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        if ($status != Password::PASSWORD_RESET) {
            throw ValidationException::withMessages([
                'email' => [__($status)],
            ]);
        }

        return response()->json(['status' => __($status)]);
    }
}



------------------------------------------------------------
FILE: app\Http\Controllers\Auth\PasswordController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Auth\PasswordController.php
Size: 734 bytes
Last Modified: 08/11/2025 12:26:00
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;

class PasswordController extends Controller
{
    /**
     * Update the user's password.
     */
    public function update(Request $request): RedirectResponse
    {
        $validated = $request->validate([
            'current_password' => ['required', 'current_password'],
            'password' => ['required', Password::defaults(), 'confirmed'],
        ]);

        $request->user()->update([
            'password' => Hash::make($validated['password']),
        ]);

        return back();
    }
}



------------------------------------------------------------
FILE: app\Http\Controllers\Auth\PasswordResetLinkController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Auth\PasswordResetLinkController.php
Size: 1.13 KB
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;
use Illuminate\Validation\ValidationException;

class PasswordResetLinkController extends Controller
{
    /**
     * Handle an incoming password reset link request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): JsonResponse
    {
        $request->validate([
            'email' => ['required', 'email'],
        ]);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $request->only('email')
        );

        if ($status != Password::RESET_LINK_SENT) {
            throw ValidationException::withMessages([
                'email' => [__($status)],
            ]);
        }

        return response()->json(['status' => __($status)]);
    }
}



------------------------------------------------------------
FILE: app\Http\Controllers\Auth\RegisteredUserController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Auth\RegisteredUserController.php
Size: 2.34 KB
Last Modified: 09/02/2025 17:14:36
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Models\Kelas;
use App\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create(): View
    {
        return view('auth.register');
    }

    /**
     * Handle an incoming registration request.
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Ekstrak role dari email
        $email = strtolower($request->email);
        $role = 'siswa'; // default role
        $roleKeyword = '';

        // Cek untuk role guru
        if (preg_match('/\.(guru|pengajar|teacher)@/', $email, $matches)) {
            $role = 'guru';
            $roleKeyword = $matches[1];
        }
        // Cek untuk role IT
        else if (preg_match('/\.(it|teknisi|troubleshoot)@/', $email, $matches)) {
            $role = 'it';
            $roleKeyword = $matches[1];
        }
        // Cek untuk role BK
        else if (preg_match('/\.(bk|konseling|psikolog)@/', $email, $matches)) {
            $role = 'bk';
            $roleKeyword = $matches[1];
        }
        // Role siswa sudah sebagai default

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        // Assign role ke user
        $user->assignRole($role);

        // Jika role siswa, assign ke kelas default
        if ($role === 'siswa') {
            $kelas = Kelas::first();
            if ($kelas) {
                $user->kelas()->attach($kelas->id);
            }
        }

        // Simpan informasi role keyword untuk referensi
        $user->update([
            'role_keyword' => $roleKeyword
        ]);

        event(new Registered($user));

        Auth::login($user);

        return redirect(route('dashboard'));
    }
}


------------------------------------------------------------
FILE: app\Http\Controllers\Auth\VerifyEmailController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Auth\VerifyEmailController.php
Size: 854 bytes
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(
                config('app.frontend_url').'/dashboard?verified=1'
            );
        }

        if ($request->user()->markEmailAsVerified()) {
            event(new Verified($request->user()));
        }

        return redirect()->intended(
            config('app.frontend_url').'/dashboard?verified=1'
        );
    }
}



------------------------------------------------------------
FILE: app\Http\Controllers\AbsensiGuruController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\AbsensiGuruController.php
Size: 987 bytes
Last Modified: 08/26/2025 13:40:31
------------------------------------------------------------
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\AbsensiGuru;

class AbsensiGuruController extends Controller
{
    public function index()
    {
        return AbsensiGuru::with('guru')->get();
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'guru_id' => 'required|exists:users,id',
            'tanggal' => 'required|date',
            'status' => 'required|string',
            'keterangan' => 'nullable|string',
        ]);

        $absensi = AbsensiGuru::create($validated);
        return response()->json($absensi, 201);
    }
    public function update(Request $request, $id)
    {
        $absensi = AbsensiGuru::findOrFail($id);
        $absensi->update($request->all());
        return response()->json($absensi);
    }
    public function destroy($id)
    {
        AbsensiGuru::destroy($id);
        return response()->json(['Pesan' => 'DATA ABSENSI GURU DIHAPUS']);
    }
}



------------------------------------------------------------
FILE: app\Http\Controllers\AbsensiSiswaController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\AbsensiSiswaController.php
Size: 3.32 KB
Last Modified: 08/23/2025 17:18:34
------------------------------------------------------------
<?php

namespace App\Http\Controllers;

use App\Models\AbsensiSiswa;
use Illuminate\Support\Facades\Storage;

use Illuminate\Http\Request;

class AbsensiSiswaController extends Controller
{
    // GET /api/absensi-siswa
    public function index()
    {
        return AbsensiSiswa::with(['siswa:id,name', 'jadwal:id,nama'])->latest()->get();
    }

    // POST /api/absensi-siswa
    // POST /api/absensi-siswa
    public function store(Request $request)
    {
        $request->validate([
            'siswa_id'   => 'required|exists:users,id',
            'jadwal_id'  => 'nullable|exists:jadwal,id',
            'lat'        => 'required|numeric',
            'lng'        => 'required|numeric',
            'foto'       => 'nullable|image|max:2048',
            'device_info' => 'nullable|string',
            'keterangan' => 'nullable|string',
        ]);

        // Simpan foto absensi (jika ada)
        $path = null;
        if ($request->hasFile('foto')) {
            $path = $request->file('foto')->store('absensi', 'public');
        }

        // Titik pusat sekolah (contoh koordinat)
        $schoolLat = -7.2756;
        $schoolLng = 112.6426;
        $radius = 100; // meter

        // Hitung jarak siswa dari sekolah
        $distance = $this->calculateDistance(
            $schoolLat,
            $schoolLng,
            $request->lat,
            $request->lng
        );

        $validZona = $distance <= $radius;

        $absen = AbsensiSiswa::create([
            'siswa_id'    => $request->siswa_id,
            'jadwal_id'   => $request->jadwal_id,
            'waktu'       => now(),
            'foto_path'   => $path,
            'lat'         => $request->lat,
            'lng'         => $request->lng,
            'valid_zona'  => $validZona,
            'device_info' => $request->device_info ? json_decode($request->device_info, true) : null,
            'keterangan'  => $request->keterangan,
        ]);

        return response()->json([
            'ok'       => $validZona,
            'message'  => $validZona ? 'Absensi berhasil' : 'Di luar radius sekolah (absensi tidak sah)',
            'distance' => round($distance, 2) . ' meter',
            'data'     => $absen,
        ]);
    }

    // Haversine Formula untuk menghitung jarak
    private function calculateDistance($lat1, $lon1, $lat2, $lon2)
    {
        $earthRadius = 6371000; // meter
        $dLat = deg2rad($lat2 - $lat1);
        $dLon = deg2rad($lon2 - $lon1);

        $a = sin($dLat / 2) * sin($dLat / 2) +
            cos(deg2rad($lat1)) * cos(deg2rad($lat2)) *
            sin($dLon / 2) * sin($dLon / 2);

        $c = 2 * atan2(sqrt($a), sqrt(1 - $a));
        return $earthRadius * $c;
    }


    // GET /api/absensi-siswa/{id}
    public function show($id)
    {
        return AbsensiSiswa::with(['siswa:id,name', 'jadwal:id,nama'])->findOrFail($id);
    }

    // PUT /api/absensi-siswa/{id}
    public function update(Request $request, $id)
    {
        $absen = AbsensiSiswa::findOrFail($id);

        $absen->update($request->only(['keterangan', 'valid_zona']));

        return response()->json(['ok' => true, 'data' => $absen]);
    }

    // DELETE /api/absensi-siswa/{id}
    public function destroy($id)
    {
        $absen = AbsensiSiswa::findOrFail($id);
        $absen->delete();

        return response()->json(['ok' => true, 'message' => 'deleted']);
    }
}


------------------------------------------------------------
FILE: app\Http\Controllers\CatatanPelanggaranController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\CatatanPelanggaranController.php
Size: 1.46 KB
Last Modified: 08/12/2025 17:07:25
------------------------------------------------------------
<?php

namespace App\Http\Controllers;

use App\Models\CatatanPelanggaran;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\User;
use App\Notifications\NewPelanggaranNotification;

class CatatanPelanggaranController extends Controller
{
    /**
     * Menampilkan daftar catatan pelanggaran (khusus guru BK)
     */
    public function index()
    {
        $catatan = CatatanPelanggaran::with(['guru', 'siswa'])->get();
        return view('pelanggaran.index', compact('catatan'));
    }

    /**
     * Form input pelanggaran (khusus guru)
     */
    public function create()
    {
        $siswa = User::role('siswa')->get();
        return view('pelanggaran.create', compact('siswa'));
    }

    /**
     * Menyimpan catatan pelanggaran
     */
    public function store(Request $request)
    {
        $request->validate([
            'siswa_id' => 'required|exists:users,id',
            'deskripsi' => 'required|string|max:2000',
        ]);

        $pelanggaran = CatatanPelanggaran::create([
            'guru_id' => Auth::id(),
            'siswa_id' => $request->siswa_id,
            'deskripsi' => $request->deskripsi,
        ]);

        // Kirim notifikasi ke semua guru BK
        $guruBK = User::role('guru_bk')->get();
        foreach ($guruBK as $g) {
            $g->notify(new NewPelanggaranNotification($pelanggaran));
        }

        return redirect()->back()->with('success', 'Catatan pelanggaran berhasil ditambahkan.');
    }
}


------------------------------------------------------------
FILE: app\Http\Controllers\Controller.php
Path: D:\smk_monitoring_app\app\Http\Controllers\Controller.php
Size: 77 bytes
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}



------------------------------------------------------------
FILE: app\Http\Controllers\JadwalController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\JadwalController.php
Size: 1.76 KB
Last Modified: 08/14/2025 17:22:05
------------------------------------------------------------
<?php

namespace App\Http\Controllers;

use App\Models\Jadwal;
use App\Models\Kelas;
use App\Models\Jurusan;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class JadwalController extends Controller
{
    //
    public function index()
    {
        $jadwal = Jadwal::with(['guru', 'kelas', 'jurusan'])->get();
        return view('jadwal.index', compact('jadwal'));
    }
    public function create()
    {
        $kelas = Kelas::all();
        $jurusan = Jurusan::all();
        return view('jadwal.create', compact('kelas', 'jurusan'));
    }
    public function store(Request $request)
    {
        $request->validate([
            'judul_event' => 'required|string|max:255',
            'tanggal' => 'required|date',
            'jam_mulai' => 'required',
            'jam_selesai' => 'required',
            'kelas_id' => 'required|exist:jurusan,id',
            'jenjang' => 'required|in:10,11,12',
            'tipe' => 'required|in:pelajaran,event',
        ]);
        Jadwal::create([
            'judul_event' => $request->judul_event,
            'deskripsi' => $request->deskripsi,
            'tanggal' => $request->tanggal,
            'jam_mulai' => $request->jam_mulai,
            'jam_selesai' => $request->jam_selesai,
            'guru_id' => Auth::id(),
            'kelas_id' => $request->kelas_id,
            'jurusan_id' => $request->jurusan_id,
            'jenjang' => $request->jenjang,
            'tipe' => $request->tipe,

        ]);
        return redirect()->route('jadwal.index')->with('SUKSES', 'JADWAL BERHASIL DI TAMBAHKAN');
    }

    public function destroy($id)
    {
        $jadwal = Jadwal::findOrFaiil($id);
        $jadwal->delete();
        return redirect()->route('jadwal.index')->with('SUKSES', 'JADWAL BERHASIL DI HAPUS');
    }
}


------------------------------------------------------------
FILE: app\Http\Controllers\ProfileController.php
Path: D:\smk_monitoring_app\app\Http\Controllers\ProfileController.php
Size: 1.48 KB
Last Modified: 08/11/2025 12:26:00
------------------------------------------------------------
<?php

namespace App\Http\Controllers;

use App\Http\Requests\ProfileUpdateRequest;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Inertia\Inertia;
use Inertia\Response;

class ProfileController extends Controller
{
    /**
     * Display the user's profile form.
     */
    public function edit(Request $request): Response
    {
        return Inertia::render('Profile/Edit', [
            'mustVerifyEmail' => $request->user() instanceof MustVerifyEmail,
            'status' => session('status'),
        ]);
    }

    /**
     * Update the user's profile information.
     */
    public function update(ProfileUpdateRequest $request): RedirectResponse
    {
        $request->user()->fill($request->validated());

        if ($request->user()->isDirty('email')) {
            $request->user()->email_verified_at = null;
        }

        $request->user()->save();

        return Redirect::route('profile.edit');
    }

    /**
     * Delete the user's account.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $request->validate([
            'password' => ['required', 'current_password'],
        ]);

        $user = $request->user();

        Auth::logout();

        $user->delete();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return Redirect::to('/');
    }
}



------------------------------------------------------------
FILE: app\Http\Middleware\EnsureEmailIsVerified.php
Path: D:\smk_monitoring_app\app\Http\Middleware\EnsureEmailIsVerified.php
Size: 739 bytes
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class EnsureEmailIsVerified
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if (! $request->user() ||
            ($request->user() instanceof MustVerifyEmail &&
            ! $request->user()->hasVerifiedEmail())) {
            return response()->json(['message' => 'Your email address is not verified.'], 409);
        }

        return $next($request);
    }
}



------------------------------------------------------------
FILE: app\Http\Middleware\HandleInertiaRequests.php
Path: D:\smk_monitoring_app\app\Http\Middleware\HandleInertiaRequests.php
Size: 780 bytes
Last Modified: 08/11/2025 12:26:00
------------------------------------------------------------
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Request;
use Inertia\Middleware;

class HandleInertiaRequests extends Middleware
{
    /**
     * The root template that is loaded on the first page visit.
     *
     * @var string
     */
    protected $rootView = 'app';

    /**
     * Determine the current asset version.
     */
    public function version(Request $request): ?string
    {
        return parent::version($request);
    }

    /**
     * Define the props that are shared by default.
     *
     * @return array<string, mixed>
     */
    public function share(Request $request): array
    {
        return [
            ...parent::share($request),
            'auth' => [
                'user' => $request->user(),
            ],
        ];
    }
}



------------------------------------------------------------
FILE: app\Http\Requests\Auth\LoginRequest.php
Path: D:\smk_monitoring_app\app\Http\Requests\Auth\LoginRequest.php
Size: 2.18 KB
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

namespace App\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => __('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->input('email')).'|'.$this->ip());
    }
}



------------------------------------------------------------
FILE: app\Http\Requests\ProfileUpdateRequest.php
Path: D:\smk_monitoring_app\app\Http\Requests\ProfileUpdateRequest.php
Size: 743 bytes
Last Modified: 08/11/2025 12:26:00
------------------------------------------------------------
<?php

namespace App\Http\Requests;

use App\Models\User;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ProfileUpdateRequest extends FormRequest
{
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'name' => ['required', 'string', 'max:255'],
            'email' => [
                'required',
                'string',
                'lowercase',
                'email',
                'max:255',
                Rule::unique(User::class)->ignore($this->user()->id),
            ],
        ];
    }
}



------------------------------------------------------------
FILE: app\Http\Kernel.php
Path: D:\smk_monitoring_app\app\Http\Kernel.php
Size: 2.29 KB
Last Modified: 09/02/2025 17:16:43
------------------------------------------------------------
<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * The application's global HTTP middleware stack.
     */
    protected $middleware = [
        \App\Http\Middleware\TrustProxies::class,
        \App\Http\Middleware\CheckForMaintenanceMode::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \App\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
    ];

    /**
     * The application's route middleware groups.
     */
    protected $middlewareGroups = [
        'web' => [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],

        'api' => [
            \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
            'throttle:api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];

    /**
     * The application's route middleware.
     */
    protected $routeMiddleware = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'signed' => \App\Http\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,

        // Middleware Spatie - INI YANG BENAR (TANPA 's' DI MIDDLEWARE)
        'role' => \Spatie\Permission\Middleware\RoleMiddleware::class,
        'permission' => \Spatie\Permission\Middleware\PermissionMiddleware::class,
    ];
}


------------------------------------------------------------
FILE: app\Models\AbsensiGuru.php
Path: D:\smk_monitoring_app\app\Models\AbsensiGuru.php
Size: 567 bytes
Last Modified: 09/01/2025 08:49:47
------------------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class AbsensiGuru extends Model
{
    protected $table = 'absensi_guru';

    // Pastikan semua kolom yang tidak boleh null ada di fillable
    protected $fillable = [
        'guru_id',
        'tanggal',
        'jam_masuk',
        'jam_keluar',
        'status',
        'keterangan',
        'latitude',
        'longitude'
    ];

    protected $casts = [
        'tanggal' => 'date',
    ];

    public function guru()
    {
        return $this->belongsTo(User::class, 'guru_id');
    }
}


------------------------------------------------------------
FILE: app\Models\AbsensiSiswa.php
Path: D:\smk_monitoring_app\app\Models\AbsensiSiswa.php
Size: 781 bytes
Last Modified: 08/22/2025 17:19:26
------------------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class AbsensiSiswa extends Model
{
    protected $table = 'absensi_siswa';

    protected $fillable = [
        'siswa_id',
        'jadwal_id',
        'waktu',
        'foto_path',
        'lat',
        'lng',
        'valid_zona',
        'device_info',
        'keterangan',
    ];

    protected $casts = [
        'waktu' => 'datetime',
        'device_info' => 'array',
        'valid_zona' => 'boolean',
    ];

    /**
     * Relasi ke siswa (User)
     */
    public function siswa()
    {
        return $this->belongsTo(User::class, 'siswa_id');
    }

    /**
     * Relasi ke jadwal
     */
    public function jadwal()
    {
        return $this->belongsTo(Jadwal::class, 'jadwal_id');
    }
}



------------------------------------------------------------
FILE: app\Models\CatatanPelanggaran.php
Path: D:\smk_monitoring_app\app\Models\CatatanPelanggaran.php
Size: 375 bytes
Last Modified: 09/01/2025 09:31:44
------------------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class CatatanPelanggaran extends Model
{
    protected $table = 'catatan_pelanggaran';

    protected $fillable = [
        'siswa',
        'guru_bk',
        'deskripsi',
        'tindak_lanjut',
        'tingkat',
        'tanggal'
    ];

    protected $casts = [
        'tanggal' => 'date'
    ];
}


------------------------------------------------------------
FILE: app\Models\Jadwal.php
Path: D:\smk_monitoring_app\app\Models\Jadwal.php
Size: 305 bytes
Last Modified: 09/01/2025 09:33:08
------------------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Jadwal extends Model
{
    protected $table = 'jadwal';

    protected $fillable = [
        'guru',
        'kelas',
        'mata_pelajaran',
        'hari',
        'jam_mulai',
        'jam_selesai',
        'ruang'
    ];
}


------------------------------------------------------------
FILE: app\Models\Jurusan.php
Path: D:\smk_monitoring_app\app\Models\Jurusan.php
Size: 424 bytes
Last Modified: 08/22/2025 17:15:27
------------------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Jurusan extends Model
{
    use HasFactory;

    protected $table = 'jurusan';
    protected $fillable = ['nama'];

    // 🔗 Relasi ke kelas
    public function kelas(): HasMany
    {
        return $this->hasMany(Kelas::class);
    }
}



------------------------------------------------------------
FILE: app\Models\Kelas.php
Path: D:\smk_monitoring_app\app\Models\Kelas.php
Size: 905 bytes
Last Modified: 08/22/2025 17:15:15
------------------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Kelas extends Model
{
    use HasFactory;

    protected $table = 'kelas'; 
    protected $fillable = ['nama', 'tingkat'];

    // 🔗 Relasi ke jurusan (1 kelas punya 1 jurusan)
    public function jurusan(): BelongsTo
    {
        return $this->belongsTo(Jurusan::class);
    }

    // 🔗 Relasi ke user (siswa/guru)
    public function users(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'kelas_user')
                    ->withTimestamps();
    }

    // 🔗 Relasi ke jadwal
    public function jadwal(): HasMany
    {
        return $this->hasMany(Jadwal::class);
    }
}



------------------------------------------------------------
FILE: app\Models\Siswa.php
Path: D:\smk_monitoring_app\app\Models\Siswa.php
Size: 368 bytes
Last Modified: 08/27/2025 16:27:24
------------------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Siswa extends Model
{
    protected $table = 'siswa'; // Tambahkan ini (tanpa "s")

    protected $fillable = [
        'user_id',
        'nis',
        'nama',
        'kelas',
        'jurusan'
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }
}


------------------------------------------------------------
FILE: app\Models\User.php
Path: D:\smk_monitoring_app\app\Models\User.php
Size: 1.15 KB
Last Modified: 09/02/2025 17:15:22
------------------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'role_keyword' // tambahkan field ini
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /**
     * Relasi dengan kelas (hanya untuk siswa)
     */
    public function kelas()
    {
        return $this->belongsToMany(Kelas::class, 'kelas_user');
    }
}


------------------------------------------------------------
FILE: app\Models\Zona.php
Path: D:\smk_monitoring_app\app\Models\Zona.php
Size: 371 bytes
Last Modified: 09/02/2025 17:45:45
------------------------------------------------------------
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Zona extends Model
{
    use HasFactory;

    protected $fillable = [
        'nama',
        'latitude',
        'longitude',
        'radius',
        'is_active'
    ];

    protected $casts = [
        'is_active' => 'boolean'
    ];
}


------------------------------------------------------------
FILE: app\Notifications\AbsensiTerlambat.php
Path: D:\smk_monitoring_app\app\Notifications\AbsensiTerlambat.php
Size: 1.25 KB
Last Modified: 09/01/2025 11:43:09
------------------------------------------------------------
<?php

namespace App\Notifications;

use App\Models\AbsensiSiswa;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\BroadcastMessage;
use Illuminate\Notifications\Messages\DatabaseMessage;
use Illuminate\Notifications\Notification;

class AbsensiTerlambat extends Notification implements ShouldQueue
{
    use Queueable;

    public function __construct(public AbsensiSiswa $absensi) {}

    public function via($notifiable)
    {
        return ['database', 'broadcast'];
    }

    public function toDatabase($notifiable)
    {
        return [
            'title' => 'Absensi Terlambat',
            'message' => 'Siswa ' . $this->absensi->siswa->name . ' terlambat masuk',
            'type' => 'warning',
            'url' => '/absensi/' . $this->absensi->id,
            'timestamp' => now()->toIso8601String()
        ];
    }

    public function toBroadcast($notifiable)
    {
        return new BroadcastMessage([
            'title' => 'Absensi Terlambat',
            'message' => 'Siswa ' . $this->absensi->siswa->name . ' terlambat masuk',
            'type' => 'warning',
            'url' => '/absensi/' . $this->absensi->id,
            'timestamp' => now()->toIso8601String()
        ]);
    }
}


------------------------------------------------------------
FILE: app\Notifications\JadwalAkanDimulai.php
Path: D:\smk_monitoring_app\app\Notifications\JadwalAkanDimulai.php
Size: 1.14 KB
Last Modified: 09/01/2025 11:42:43
------------------------------------------------------------
<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;

class JadwalAkanDimulai extends Notification
{
    use Queueable;

    /**
     * Create a new notification instance.
     */
    public function __construct()
    {
        //
    }

    /**
     * Get the notification's delivery channels.
     *
     * @return array<int, string>
     */
    public function via(object $notifiable): array
    {
        return ['mail'];
    }

    /**
     * Get the mail representation of the notification.
     */
    public function toMail(object $notifiable): MailMessage
    {
        return (new MailMessage)
            ->line('The introduction to the notification.')
            ->action('Notification Action', url('/'))
            ->line('Thank you for using our application!');
    }

    /**
     * Get the array representation of the notification.
     *
     * @return array<string, mixed>
     */
    public function toArray(object $notifiable): array
    {
        return [
            //
        ];
    }
}



------------------------------------------------------------
FILE: app\Notifications\PelanggaranBaru.php
Path: D:\smk_monitoring_app\app\Notifications\PelanggaranBaru.php
Size: 1.14 KB
Last Modified: 09/01/2025 11:42:41
------------------------------------------------------------
<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;

class PelanggaranBaru extends Notification
{
    use Queueable;

    /**
     * Create a new notification instance.
     */
    public function __construct()
    {
        //
    }

    /**
     * Get the notification's delivery channels.
     *
     * @return array<int, string>
     */
    public function via(object $notifiable): array
    {
        return ['mail'];
    }

    /**
     * Get the mail representation of the notification.
     */
    public function toMail(object $notifiable): MailMessage
    {
        return (new MailMessage)
            ->line('The introduction to the notification.')
            ->action('Notification Action', url('/'))
            ->line('Thank you for using our application!');
    }

    /**
     * Get the array representation of the notification.
     *
     * @return array<string, mixed>
     */
    public function toArray(object $notifiable): array
    {
        return [
            //
        ];
    }
}



------------------------------------------------------------
FILE: app\Providers\AppServiceProvider.php
Path: D:\smk_monitoring_app\app\Providers\AppServiceProvider.php
Size: 769 bytes
Last Modified: 08/31/2025 13:00:18
------------------------------------------------------------
<?php

namespace App\Providers;

use Illuminate\Auth\Notifications\ResetPassword;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        // Custom URL reset password agar diarahkan ke frontend
        ResetPassword::createUrlUsing(function (object $notifiable, string $token) {
            $frontendUrl = config('app.frontend_url', env('FRONTEND_URL', 'http://localhost:3000'));
            return "{$frontendUrl}/password-reset/{$token}?email={$notifiable->getEmailForPasswordReset()}";
        });
    }
}


------------------------------------------------------------
FILE: app\Providers\RouteServiceProvider.php
Path: D:\smk_monitoring_app\app\Providers\RouteServiceProvider.php
Size: 1.26 KB
Last Modified: 09/01/2025 17:48:35
------------------------------------------------------------
<?php

namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Route;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The path to the "home" route for your application.
     *
     * Typically, users are redirected here after authentication.
     *
     * @var string
     */
    public const HOME = '/dashboard';

    /**
     * Define your route model bindings, pattern filters, and other route configuration.
     */
    public function boot(): void
    {
        $this->configureRateLimiting();

        $this->routes(function () {
            Route::middleware('api')
                ->prefix('api')
                ->group(base_path('routes/api.php'));

            Route::middleware('web')
                ->group(base_path('routes/web.php'));
        });
    }

    /**
     * Configure the rate limiters for the application.
     */
    protected function configureRateLimiting(): void
    {
        RateLimiter::for('api', function (Request $request) {
            return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());
        });
    }
}



------------------------------------------------------------
FILE: app\Providers\TelescopeServiceProvider.php
Path: D:\smk_monitoring_app\app\Providers\TelescopeServiceProvider.php
Size: 1.60 KB
Last Modified: 08/27/2025 00:48:18
------------------------------------------------------------
<?php

namespace App\Providers;

use Illuminate\Support\Facades\Gate;
use Laravel\Telescope\IncomingEntry;
use Laravel\Telescope\Telescope;
use Laravel\Telescope\TelescopeApplicationServiceProvider;

class TelescopeServiceProvider extends TelescopeApplicationServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        // Telescope::night();

        $this->hideSensitiveRequestDetails();

        $isLocal = $this->app->environment('local');

        Telescope::filter(function (IncomingEntry $entry) use ($isLocal) {
            return $isLocal ||
                   $entry->isReportableException() ||
                   $entry->isFailedRequest() ||
                   $entry->isFailedJob() ||
                   $entry->isScheduledTask() ||
                   $entry->hasMonitoredTag();
        });
    }

    /**
     * Prevent sensitive request details from being logged by Telescope.
     */
    protected function hideSensitiveRequestDetails(): void
    {
        if ($this->app->environment('local')) {
            return;
        }

        Telescope::hideRequestParameters(['_token']);

        Telescope::hideRequestHeaders([
            'cookie',
            'x-csrf-token',
            'x-xsrf-token',
        ]);
    }

    /**
     * Register the Telescope gate.
     *
     * This gate determines who can access Telescope in non-local environments.
     */
    protected function gate(): void
    {
        Gate::define('viewTelescope', function ($user) {
            return in_array($user->email, [
                //
            ]);
        });
    }
}



------------------------------------------------------------
FILE: bootstrap\app.php
Path: D:\smk_monitoring_app\bootstrap\app.php
Size: 743 bytes
Last Modified: 09/01/2025 11:38:55
------------------------------------------------------------
<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        api: __DIR__.'/../routes/api.php',
        commands: __DIR__.'/../routes/console.php',
        channels: __DIR__.'/../routes/channels.php',
        health: '/up',
    )
    ->withBroadcasting(
        __DIR__.'/../routes/channels.php',
        ['prefix' => 'api', 'middleware' => ['auth:sanctum']]
    )
    ->withMiddleware(function (Middleware $middleware) {
        //
    })
    ->withExceptions(function (Exceptions $exceptions) {
        //
    })->create();


------------------------------------------------------------
FILE: bootstrap\providers.php
Path: D:\smk_monitoring_app\bootstrap\providers.php
Size: 169 bytes
Last Modified: 09/02/2025 16:38:14
------------------------------------------------------------
<?php

return [
    App\Providers\AppServiceProvider::class,
    App\Providers\RouteServiceProvider::class,
    App\Providers\TelescopeServiceProvider::class,
];



------------------------------------------------------------
FILE: config\app.php
Path: D:\smk_monitoring_app\config\app.php
Size: 4.17 KB
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */

    'locale' => env('APP_LOCALE', 'en'),

    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),

    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */

    'cipher' => 'AES-256-CBC',

    'key' => env('APP_KEY'),

    'previous_keys' => [
        ...array_filter(
            explode(',', (string) env('APP_PREVIOUS_KEYS', ''))
        ),
    ],

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
        'store' => env('APP_MAINTENANCE_STORE', 'database'),
    ],

];



------------------------------------------------------------
FILE: config\auth.php
Path: D:\smk_monitoring_app\config\auth.php
Size: 4.05 KB
Last Modified: 08/25/2025 21:03:23
------------------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],

        /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */
        'api' => [
            'driver' => 'sanctum',
            'provider' => 'users',
        ],
    ],

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],
        

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],
    
    

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the number of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];


------------------------------------------------------------
FILE: config\broadcasting.php
Path: D:\smk_monitoring_app\config\broadcasting.php
Size: 2.62 KB
Last Modified: 09/01/2025 11:03:29
------------------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Broadcaster
    |--------------------------------------------------------------------------
    |
    | This option controls the default broadcaster that will be used by the
    | framework when an event needs to be broadcast. You may set this to
    | any of the connections defined in the "connections" array below.
    |
    | Supported: "reverb", "pusher", "ably", "redis", "log", "null"
    |
    */

    'default' => env('BROADCAST_CONNECTION', 'null'),

    /*
    |--------------------------------------------------------------------------
    | Broadcast Connections
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the broadcast connections that will be used
    | to broadcast events to other systems or over WebSockets. Samples of
    | each available type of connection are provided inside this array.
    |
    */

    'connections' => [

        'reverb' => [
            'driver' => 'reverb',
            'key' => env('REVERB_APP_KEY'),
            'secret' => env('REVERB_APP_SECRET'),
            'app_id' => env('REVERB_APP_ID'),
            'options' => [
                'host' => env('REVERB_HOST'),
                'port' => env('REVERB_PORT', 443),
                'scheme' => env('REVERB_SCHEME', 'https'),
                'useTLS' => env('REVERB_SCHEME', 'https') === 'https',
            ],
            'client_options' => [
                // Guzzle client options: https://docs.guzzlephp.org/en/stable/request-options.html
            ],
        ],

        'pusher' => [
            'driver' => 'pusher',
            'key' => env('PUSHER_APP_KEY'),
            'secret' => env('PUSHER_APP_SECRET'),
            'app_id' => env('PUSHER_APP_ID'),
            'options' => [
                'cluster' => env('PUSHER_APP_CLUSTER'),
                'host' => env('PUSHER_HOST') ?: 'api-'.env('PUSHER_APP_CLUSTER', 'mt1').'.pusher.com',
                'port' => env('PUSHER_PORT', 443),
                'scheme' => env('PUSHER_SCHEME', 'https'),
                'encrypted' => true,
                'useTLS' => env('PUSHER_SCHEME', 'https') === 'https',
            ],
            'client_options' => [
                // Guzzle client options: https://docs.guzzlephp.org/en/stable/request-options.html
            ],
        ],

        'ably' => [
            'driver' => 'ably',
            'key' => env('ABLY_KEY'),
        ],

        'log' => [
            'driver' => 'log',
        ],

        'null' => [
            'driver' => 'null',
        ],

    ],

];



------------------------------------------------------------
FILE: config\cache.php
Path: D:\smk_monitoring_app\config\cache.php
Size: 3.40 KB
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug((string) env('APP_NAME', 'laravel')).'-cache-'),

];



------------------------------------------------------------
FILE: config\cors.php
Path: D:\smk_monitoring_app\config\cors.php
Size: 859 bytes
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Cross-Origin Resource Sharing (CORS) Configuration
    |--------------------------------------------------------------------------
    |
    | Here you may configure your settings for cross-origin resource sharing
    | or "CORS". This determines what cross-origin operations may execute
    | in web browsers. You are free to adjust these settings as needed.
    |
    | To learn more: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
    |
    */

    'paths' => ['*'],

    'allowed_methods' => ['*'],

    'allowed_origins' => [env('FRONTEND_URL', 'http://localhost:3000')],

    'allowed_origins_patterns' => [],

    'allowed_headers' => ['*'],

    'exposed_headers' => [],

    'max_age' => 0,

    'supports_credentials' => true,

];



------------------------------------------------------------
FILE: config\database.php
Path: D:\smk_monitoring_app\config\database.php
Size: 6.12 KB
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */

    'default' => env('DB_CONNECTION', 'sqlite'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */

    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug((string) env('APP_NAME', 'laravel')).'-database-'),
            'persistent' => env('REDIS_PERSISTENT', false),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];



------------------------------------------------------------
FILE: config\filesystems.php
Path: D:\smk_monitoring_app\config\filesystems.php
Size: 2.44 KB
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app/private'),
            'serve' => true,
            'throw' => false,
            'report' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
            'report' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
            'report' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];



------------------------------------------------------------
FILE: config\logging.php
Path: D:\smk_monitoring_app\config\logging.php
Size: 4.23 KB
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */

    'channels' => [

        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', (string) env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'handler_with' => [
                'stream' => 'php://stderr',
            ],
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],

    ],

];



------------------------------------------------------------
FILE: config\mail.php
Path: D:\smk_monitoring_app\config\mail.php
Size: 3.53 KB
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */

    'default' => env('MAIL_MAILER', 'log'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */

    'mailers' => [

        'smtp' => [
            'transport' => 'smtp',
            'scheme' => env('MAIL_SCHEME'),
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url((string) env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'resend' => [
            'transport' => 'resend',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
            'retry_after' => 60,
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
            'retry_after' => 60,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

];



------------------------------------------------------------
FILE: config\permission.php
Path: D:\smk_monitoring_app\config\permission.php
Size: 6.89 KB
Last Modified: 08/11/2025 13:24:59
------------------------------------------------------------
<?php

return [

    'models' => [

        /*
         * When using the "HasPermissions" trait from this package, we need to know which
         * Eloquent model should be used to retrieve your permissions. Of course, it
         * is often just the "Permission" model but you may use whatever you like.
         *
         * The model you want to use as a Permission model needs to implement the
         * `Spatie\Permission\Contracts\Permission` contract.
         */

        'permission' => Spatie\Permission\Models\Permission::class,

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * Eloquent model should be used to retrieve your roles. Of course, it
         * is often just the "Role" model but you may use whatever you like.
         *
         * The model you want to use as a Role model needs to implement the
         * `Spatie\Permission\Contracts\Role` contract.
         */

        'role' => Spatie\Permission\Models\Role::class,

    ],

    'table_names' => [

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * table should be used to retrieve your roles. We have chosen a basic
         * default value but you may easily change it to any table you like.
         */

        'roles' => 'roles',

        /*
         * When using the "HasPermissions" trait from this package, we need to know which
         * table should be used to retrieve your permissions. We have chosen a basic
         * default value but you may easily change it to any table you like.
         */

        'permissions' => 'permissions',

        /*
         * When using the "HasPermissions" trait from this package, we need to know which
         * table should be used to retrieve your models permissions. We have chosen a
         * basic default value but you may easily change it to any table you like.
         */

        'model_has_permissions' => 'model_has_permissions',

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * table should be used to retrieve your models roles. We have chosen a
         * basic default value but you may easily change it to any table you like.
         */

        'model_has_roles' => 'model_has_roles',

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * table should be used to retrieve your roles permissions. We have chosen a
         * basic default value but you may easily change it to any table you like.
         */

        'role_has_permissions' => 'role_has_permissions',
    ],

    'column_names' => [
        /*
         * Change this if you want to name the related pivots other than defaults
         */
        'role_pivot_key' => null, // default 'role_id',
        'permission_pivot_key' => null, // default 'permission_id',

        /*
         * Change this if you want to name the related model primary key other than
         * `model_id`.
         *
         * For example, this would be nice if your primary keys are all UUIDs. In
         * that case, name this `model_uuid`.
         */

        'model_morph_key' => 'model_id',

        /*
         * Change this if you want to use the teams feature and your related model's
         * foreign key is other than `team_id`.
         */

        'team_foreign_key' => 'team_id',
    ],

    /*
     * When set to true, the method for checking permissions will be registered on the gate.
     * Set this to false if you want to implement custom logic for checking permissions.
     */

    'register_permission_check_method' => true,

    /*
     * When set to true, Laravel\Octane\Events\OperationTerminated event listener will be registered
     * this will refresh permissions on every TickTerminated, TaskTerminated and RequestTerminated
     * NOTE: This should not be needed in most cases, but an Octane/Vapor combination benefited from it.
     */
    'register_octane_reset_listener' => false,

    /*
     * Events will fire when a role or permission is assigned/unassigned:
     * \Spatie\Permission\Events\RoleAttached
     * \Spatie\Permission\Events\RoleDetached
     * \Spatie\Permission\Events\PermissionAttached
     * \Spatie\Permission\Events\PermissionDetached
     *
     * To enable, set to true, and then create listeners to watch these events.
     */
    'events_enabled' => false,

    /*
     * Teams Feature.
     * When set to true the package implements teams using the 'team_foreign_key'.
     * If you want the migrations to register the 'team_foreign_key', you must
     * set this to true before doing the migration.
     * If you already did the migration then you must make a new migration to also
     * add 'team_foreign_key' to 'roles', 'model_has_roles', and 'model_has_permissions'
     * (view the latest version of this package's migration file)
     */

    'teams' => false,

    /*
     * The class to use to resolve the permissions team id
     */
    'team_resolver' => \Spatie\Permission\DefaultTeamResolver::class,

    /*
     * Passport Client Credentials Grant
     * When set to true the package will use Passports Client to check permissions
     */

    'use_passport_client_credentials' => false,

    /*
     * When set to true, the required permission names are added to exception messages.
     * This could be considered an information leak in some contexts, so the default
     * setting is false here for optimum safety.
     */

    'display_permission_in_exception' => false,

    /*
     * When set to true, the required role names are added to exception messages.
     * This could be considered an information leak in some contexts, so the default
     * setting is false here for optimum safety.
     */

    'display_role_in_exception' => false,

    /*
     * By default wildcard permission lookups are disabled.
     * See documentation to understand supported syntax.
     */

    'enable_wildcard_permission' => false,

    /*
     * The class to use for interpreting wildcard permissions.
     * If you need to modify delimiters, override the class and specify its name here.
     */
    // 'wildcard_permission' => Spatie\Permission\WildcardPermission::class,

    /* Cache-specific settings */

    'cache' => [

        /*
         * By default all permissions are cached for 24 hours to speed up performance.
         * When permissions or roles are updated the cache is flushed automatically.
         */

        'expiration_time' => \DateInterval::createFromDateString('24 hours'),

        /*
         * The cache key used to store all permissions.
         */

        'key' => 'spatie.permission.cache',

        /*
         * You may optionally indicate a specific cache driver to use for permission and
         * role caching using any of the `store` drivers listed in the cache.php config
         * file. Using 'default' here means to use the `default` set in cache.php.
         */

        'store' => 'default',
    ],
];



------------------------------------------------------------
FILE: config\queue.php
Path: D:\smk_monitoring_app\config\queue.php
Size: 3.73 KB
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],

];



------------------------------------------------------------
FILE: config\reverb.php
Path: D:\smk_monitoring_app\config\reverb.php
Size: 3.32 KB
Last Modified: 09/01/2025 10:44:38
------------------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Reverb Server
    |--------------------------------------------------------------------------
    |
    | This option controls the default server used by Reverb to handle
    | incoming messages as well as broadcasting message to all your
    | connected clients. At this time only "reverb" is supported.
    |
    */

    'default' => env('REVERB_SERVER', 'reverb'),

    /*
    |--------------------------------------------------------------------------
    | Reverb Servers
    |--------------------------------------------------------------------------
    |
    | Here you may define details for each of the supported Reverb servers.
    | Each server has its own configuration options that are defined in
    | the array below. You should ensure all the options are present.
    |
    */

    'servers' => [

        'reverb' => [
            'host' => env('REVERB_SERVER_HOST', '0.0.0.0'),
            'port' => env('REVERB_SERVER_PORT', 8080),
            'path' => env('REVERB_SERVER_PATH', ''),
            'hostname' => env('REVERB_HOST'),
            'options' => [
                'tls' => [],
            ],
            'max_request_size' => env('REVERB_MAX_REQUEST_SIZE', 10_000),
            'scaling' => [
                'enabled' => env('REVERB_SCALING_ENABLED', false),
                'channel' => env('REVERB_SCALING_CHANNEL', 'reverb'),
                'server' => [
                    'url' => env('REDIS_URL'),
                    'host' => env('REDIS_HOST', '127.0.0.1'),
                    'port' => env('REDIS_PORT', '6379'),
                    'username' => env('REDIS_USERNAME'),
                    'password' => env('REDIS_PASSWORD'),
                    'database' => env('REDIS_DB', '0'),
                    'timeout' => env('REDIS_TIMEOUT', 60),
                ],
            ],
            'pulse_ingest_interval' => env('REVERB_PULSE_INGEST_INTERVAL', 15),
            'telescope_ingest_interval' => env('REVERB_TELESCOPE_INGEST_INTERVAL', 15),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Reverb Applications
    |--------------------------------------------------------------------------
    |
    | Here you may define how Reverb applications are managed. If you choose
    | to use the "config" provider, you may define an array of apps which
    | your server will support, including their connection credentials.
    |
    */

    'apps' => [

        'provider' => 'config',

        'apps' => [
            [
                'key' => env('REVERB_APP_KEY'),
                'secret' => env('REVERB_APP_SECRET'),
                'app_id' => env('REVERB_APP_ID'),
                'options' => [
                    'host' => env('REVERB_HOST'),
                    'port' => env('REVERB_PORT', 443),
                    'scheme' => env('REVERB_SCHEME', 'https'),
                    'useTLS' => env('REVERB_SCHEME', 'https') === 'https',
                ],
                'allowed_origins' => ['*'],
                'ping_interval' => env('REVERB_APP_PING_INTERVAL', 60),
                'activity_timeout' => env('REVERB_APP_ACTIVITY_TIMEOUT', 30),
                'max_message_size' => env('REVERB_APP_MAX_MESSAGE_SIZE', 10_000),
            ],
        ],

    ],

];



------------------------------------------------------------
FILE: config\sanctum.php
Path: D:\smk_monitoring_app\config\sanctum.php
Size: 1.82 KB
Last Modified: 09/01/2025 15:09:35
------------------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Stateful Domains
    |--------------------------------------------------------------------------
    |
    | Requests from these domains / hosts will receive stateful API
    | authentication cookies. Include your frontend URL here.
    |
    */

    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', 'localhost,127.0.0.1,::1')),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Guards
    |--------------------------------------------------------------------------
    |
    | Ini harus berupa STRING, BUKAN ARRAY
    | Untuk API murni, gunakan 'web' (bukan 'api')
    |
    */

    'guard' => 'web',  // INI YANG BENAR - BUKAN ARRAY

    /*
    |--------------------------------------------------------------------------
    | Expiration Minutes
    |--------------------------------------------------------------------------
    */

    'expiration' => null,

    /*
    |--------------------------------------------------------------------------
    | Token Prefix
    |--------------------------------------------------------------------------
    */

    'token_prefix' => env('SANCTUM_TOKEN_PREFIX', ''),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Middleware
    |--------------------------------------------------------------------------
    |
    | Perbaiki namespace middleware dengan BACKSLASH di awal
    |
    */

    'middleware' => [
        'authenticate_session' => \Laravel\Sanctum\Http\Middleware\AuthenticateSession::class,
        'encrypt_cookies' => \Illuminate\Cookie\Middleware\EncryptCookies::class,
        'validate_csrf_token' => \Illuminate\Foundation\Http\Middleware\ValidateCsrfToken::class,
    ],

];



------------------------------------------------------------
FILE: config\services.php
Path: D:\smk_monitoring_app\config\services.php
Size: 1.01 KB
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'resend' => [
        'key' => env('RESEND_KEY'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],

];



------------------------------------------------------------
FILE: config\session.php
Path: D:\smk_monitoring_app\config\session.php
Size: 7.66 KB
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "memcached",
    |            "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel')).'-session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];



------------------------------------------------------------
FILE: config\telescope.php
Path: D:\smk_monitoring_app\config\telescope.php
Size: 6.68 KB
Last Modified: 08/27/2025 00:48:18
------------------------------------------------------------
<?php

use Laravel\Telescope\Http\Middleware\Authorize;
use Laravel\Telescope\Watchers;

return [

    /*
    |--------------------------------------------------------------------------
    | Telescope Master Switch
    |--------------------------------------------------------------------------
    |
    | This option may be used to disable all Telescope watchers regardless
    | of their individual configuration, which simply provides a single
    | and convenient way to enable or disable Telescope data storage.
    |
    */

    'enabled' => env('TELESCOPE_ENABLED', true),

    /*
    |--------------------------------------------------------------------------
    | Telescope Domain
    |--------------------------------------------------------------------------
    |
    | This is the subdomain where Telescope will be accessible from. If the
    | setting is null, Telescope will reside under the same domain as the
    | application. Otherwise, this value will be used as the subdomain.
    |
    */

    'domain' => env('TELESCOPE_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | Telescope Path
    |--------------------------------------------------------------------------
    |
    | This is the URI path where Telescope will be accessible from. Feel free
    | to change this path to anything you like. Note that the URI will not
    | affect the paths of its internal API that aren't exposed to users.
    |
    */

    'path' => env('TELESCOPE_PATH', 'telescope'),

    /*
    |--------------------------------------------------------------------------
    | Telescope Storage Driver
    |--------------------------------------------------------------------------
    |
    | This configuration options determines the storage driver that will
    | be used to store Telescope's data. In addition, you may set any
    | custom options as needed by the particular driver you choose.
    |
    */

    'driver' => env('TELESCOPE_DRIVER', 'database'),

    'storage' => [
        'database' => [
            'connection' => env('DB_CONNECTION', 'mysql'),
            'chunk' => 1000,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Telescope Queue
    |--------------------------------------------------------------------------
    |
    | This configuration options determines the queue connection and queue
    | which will be used to process ProcessPendingUpdate jobs. This can
    | be changed if you would prefer to use a non-default connection.
    |
    */

    'queue' => [
        'connection' => env('TELESCOPE_QUEUE_CONNECTION'),
        'queue' => env('TELESCOPE_QUEUE'),
        'delay' => env('TELESCOPE_QUEUE_DELAY', 10),
    ],

    /*
    |--------------------------------------------------------------------------
    | Telescope Route Middleware
    |--------------------------------------------------------------------------
    |
    | These middleware will be assigned to every Telescope route, giving you
    | the chance to add your own middleware to this list or change any of
    | the existing middleware. Or, you can simply stick with this list.
    |
    */

    'middleware' => [
        'web',
        Authorize::class,
    ],

    /*
    |--------------------------------------------------------------------------
    | Allowed / Ignored Paths & Commands
    |--------------------------------------------------------------------------
    |
    | The following array lists the URI paths and Artisan commands that will
    | not be watched by Telescope. In addition to this list, some Laravel
    | commands, like migrations and queue commands, are always ignored.
    |
    */

    'only_paths' => [
        // 'api/*'
    ],

    'ignore_paths' => [
        'livewire*',
        'nova-api*',
        'pulse*',
    ],

    'ignore_commands' => [
        //
    ],

    /*
    |--------------------------------------------------------------------------
    | Telescope Watchers
    |--------------------------------------------------------------------------
    |
    | The following array lists the "watchers" that will be registered with
    | Telescope. The watchers gather the application's profile data when
    | a request or task is executed. Feel free to customize this list.
    |
    */

    'watchers' => [
        Watchers\BatchWatcher::class => env('TELESCOPE_BATCH_WATCHER', true),

        Watchers\CacheWatcher::class => [
            'enabled' => env('TELESCOPE_CACHE_WATCHER', true),
            'hidden' => [],
            'ignore' => [],
        ],

        Watchers\ClientRequestWatcher::class => env('TELESCOPE_CLIENT_REQUEST_WATCHER', true),

        Watchers\CommandWatcher::class => [
            'enabled' => env('TELESCOPE_COMMAND_WATCHER', true),
            'ignore' => [],
        ],

        Watchers\DumpWatcher::class => [
            'enabled' => env('TELESCOPE_DUMP_WATCHER', true),
            'always' => env('TELESCOPE_DUMP_WATCHER_ALWAYS', false),
        ],

        Watchers\EventWatcher::class => [
            'enabled' => env('TELESCOPE_EVENT_WATCHER', true),
            'ignore' => [],
        ],

        Watchers\ExceptionWatcher::class => env('TELESCOPE_EXCEPTION_WATCHER', true),

        Watchers\GateWatcher::class => [
            'enabled' => env('TELESCOPE_GATE_WATCHER', true),
            'ignore_abilities' => [],
            'ignore_packages' => true,
            'ignore_paths' => [],
        ],

        Watchers\JobWatcher::class => env('TELESCOPE_JOB_WATCHER', true),

        Watchers\LogWatcher::class => [
            'enabled' => env('TELESCOPE_LOG_WATCHER', true),
            'level' => 'error',
        ],

        Watchers\MailWatcher::class => env('TELESCOPE_MAIL_WATCHER', true),

        Watchers\ModelWatcher::class => [
            'enabled' => env('TELESCOPE_MODEL_WATCHER', true),
            'events' => ['eloquent.*'],
            'hydrations' => true,
        ],

        Watchers\NotificationWatcher::class => env('TELESCOPE_NOTIFICATION_WATCHER', true),

        Watchers\QueryWatcher::class => [
            'enabled' => env('TELESCOPE_QUERY_WATCHER', true),
            'ignore_packages' => true,
            'ignore_paths' => [],
            'slow' => 100,
        ],

        Watchers\RedisWatcher::class => env('TELESCOPE_REDIS_WATCHER', true),

        Watchers\RequestWatcher::class => [
            'enabled' => env('TELESCOPE_REQUEST_WATCHER', true),
            'size_limit' => env('TELESCOPE_RESPONSE_SIZE_LIMIT', 64),
            'ignore_http_methods' => [],
            'ignore_status_codes' => [],
        ],

        Watchers\ScheduleWatcher::class => env('TELESCOPE_SCHEDULE_WATCHER', true),
        Watchers\ViewWatcher::class => env('TELESCOPE_VIEW_WATCHER', true),
    ],
];



------------------------------------------------------------
FILE: database\factories\UserFactory.php
Path: D:\smk_monitoring_app\database\factories\UserFactory.php
Size: 1.05 KB
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}



------------------------------------------------------------
FILE: database\migrations\0001_01_01_000000_create_users_table.php
Path: D:\smk_monitoring_app\database\migrations\0001_01_01_000000_create_users_table.php
Size: 1.44 KB
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};



------------------------------------------------------------
FILE: database\migrations\0001_01_01_000001_create_cache_table.php
Path: D:\smk_monitoring_app\database\migrations\0001_01_01_000001_create_cache_table.php
Size: 849 bytes
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};



------------------------------------------------------------
FILE: database\migrations\0001_01_01_000002_create_jobs_table.php
Path: D:\smk_monitoring_app\database\migrations\0001_01_01_000002_create_jobs_table.php
Size: 1.77 KB
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};



------------------------------------------------------------
FILE: database\migrations\2025_08_11_062459_create_permission_tables.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_11_062459_create_permission_tables.php
Size: 6.39 KB
Last Modified: 08/11/2025 13:24:59
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        $teams = config('permission.teams');
        $tableNames = config('permission.table_names');
        $columnNames = config('permission.column_names');
        $pivotRole = $columnNames['role_pivot_key'] ?? 'role_id';
        $pivotPermission = $columnNames['permission_pivot_key'] ?? 'permission_id';

        throw_if(empty($tableNames), new Exception('Error: config/permission.php not loaded. Run [php artisan config:clear] and try again.'));
        throw_if($teams && empty($columnNames['team_foreign_key'] ?? null), new Exception('Error: team_foreign_key on config/permission.php not loaded. Run [php artisan config:clear] and try again.'));

        Schema::create($tableNames['permissions'], static function (Blueprint $table) {
            // $table->engine('InnoDB');
            $table->bigIncrements('id'); // permission id
            $table->string('name');       // For MyISAM use string('name', 225); // (or 166 for InnoDB with Redundant/Compact row format)
            $table->string('guard_name'); // For MyISAM use string('guard_name', 25);
            $table->timestamps();

            $table->unique(['name', 'guard_name']);
        });

        Schema::create($tableNames['roles'], static function (Blueprint $table) use ($teams, $columnNames) {
            // $table->engine('InnoDB');
            $table->bigIncrements('id'); // role id
            if ($teams || config('permission.testing')) { // permission.testing is a fix for sqlite testing
                $table->unsignedBigInteger($columnNames['team_foreign_key'])->nullable();
                $table->index($columnNames['team_foreign_key'], 'roles_team_foreign_key_index');
            }
            $table->string('name');       // For MyISAM use string('name', 225); // (or 166 for InnoDB with Redundant/Compact row format)
            $table->string('guard_name'); // For MyISAM use string('guard_name', 25);
            $table->timestamps();
            if ($teams || config('permission.testing')) {
                $table->unique([$columnNames['team_foreign_key'], 'name', 'guard_name']);
            } else {
                $table->unique(['name', 'guard_name']);
            }
        });

        Schema::create($tableNames['model_has_permissions'], static function (Blueprint $table) use ($tableNames, $columnNames, $pivotPermission, $teams) {
            $table->unsignedBigInteger($pivotPermission);

            $table->string('model_type');
            $table->unsignedBigInteger($columnNames['model_morph_key']);
            $table->index([$columnNames['model_morph_key'], 'model_type'], 'model_has_permissions_model_id_model_type_index');

            $table->foreign($pivotPermission)
                ->references('id') // permission id
                ->on($tableNames['permissions'])
                ->onDelete('cascade');
            if ($teams) {
                $table->unsignedBigInteger($columnNames['team_foreign_key']);
                $table->index($columnNames['team_foreign_key'], 'model_has_permissions_team_foreign_key_index');

                $table->primary([$columnNames['team_foreign_key'], $pivotPermission, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_permissions_permission_model_type_primary');
            } else {
                $table->primary([$pivotPermission, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_permissions_permission_model_type_primary');
            }

        });

        Schema::create($tableNames['model_has_roles'], static function (Blueprint $table) use ($tableNames, $columnNames, $pivotRole, $teams) {
            $table->unsignedBigInteger($pivotRole);

            $table->string('model_type');
            $table->unsignedBigInteger($columnNames['model_morph_key']);
            $table->index([$columnNames['model_morph_key'], 'model_type'], 'model_has_roles_model_id_model_type_index');

            $table->foreign($pivotRole)
                ->references('id') // role id
                ->on($tableNames['roles'])
                ->onDelete('cascade');
            if ($teams) {
                $table->unsignedBigInteger($columnNames['team_foreign_key']);
                $table->index($columnNames['team_foreign_key'], 'model_has_roles_team_foreign_key_index');

                $table->primary([$columnNames['team_foreign_key'], $pivotRole, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_roles_role_model_type_primary');
            } else {
                $table->primary([$pivotRole, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_roles_role_model_type_primary');
            }
        });

        Schema::create($tableNames['role_has_permissions'], static function (Blueprint $table) use ($tableNames, $pivotRole, $pivotPermission) {
            $table->unsignedBigInteger($pivotPermission);
            $table->unsignedBigInteger($pivotRole);

            $table->foreign($pivotPermission)
                ->references('id') // permission id
                ->on($tableNames['permissions'])
                ->onDelete('cascade');

            $table->foreign($pivotRole)
                ->references('id') // role id
                ->on($tableNames['roles'])
                ->onDelete('cascade');

            $table->primary([$pivotPermission, $pivotRole], 'role_has_permissions_permission_id_role_id_primary');
        });

        app('cache')
            ->store(config('permission.cache.store') != 'default' ? config('permission.cache.store') : null)
            ->forget(config('permission.cache.key'));
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        $tableNames = config('permission.table_names');

        if (empty($tableNames)) {
            throw new \Exception('Error: config/permission.php not found and defaults could not be merged. Please publish the package configuration before proceeding, or drop the tables manually.');
        }

        Schema::drop($tableNames['role_has_permissions']);
        Schema::drop($tableNames['model_has_roles']);
        Schema::drop($tableNames['model_has_permissions']);
        Schema::drop($tableNames['roles']);
        Schema::drop($tableNames['permissions']);
    }
};



------------------------------------------------------------
FILE: database\migrations\2025_08_12_072814_create_catatan_pelanggaran_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_12_072814_create_catatan_pelanggaran_table.php
Size: 840 bytes
Last Modified: 09/01/2025 09:31:24
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('catatan_pelanggaran', function (Blueprint $table) {
            $table->id();
            $table->string('siswa'); // Input manual, bukan foreign key
            $table->string('guru_bk'); // Input manual, bukan foreign key
            $table->text('deskripsi');
            $table->text('tindak_lanjut')->nullable();
            $table->string('tingkat')->default('ringan'); // ringan, sedang, berat
            $table->date('tanggal')->default(now());
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('catatan_pelanggaran');
    }
};


------------------------------------------------------------
FILE: database\migrations\2025_08_12_145226_create_kelas_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_12_145226_create_kelas_table.php
Size: 893 bytes
Last Modified: 09/02/2025 17:44:59
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateKelasTable extends Migration
{
    public function up()
    {
        Schema::create('kelas', function (Blueprint $table) {
            $table->id();
            $table->string('nama_kelas');
            $table->string('jurusan');
            $table->string('wali_kelas');
            $table->timestamps();
        });

        Schema::create('kelas_user', function (Blueprint $table) {
            $table->id();
            $table->foreignId('kelas_id')->constrained()->onDelete('cascade');
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('kelas_user');
        Schema::dropIfExists('kelas');
    }
}


------------------------------------------------------------
FILE: database\migrations\2025_08_12_145233_create_jurusan_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_12_145233_create_jurusan_table.php
Size: 567 bytes
Last Modified: 08/22/2025 16:15:59
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jurusan', function (Blueprint $table) {
            $table->id();
            $table->string('nama');
            $table->timestamps();
        });
    }


    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jurusan');
    }
};


------------------------------------------------------------
FILE: database\migrations\2025_08_12_145241_create_jadwal_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_12_145241_create_jadwal_table.php
Size: 742 bytes
Last Modified: 09/01/2025 09:32:33
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('jadwal', function (Blueprint $table) {
            $table->id();
            $table->string('guru'); // Input manual
            $table->string('kelas'); // Input manual
            $table->string('mata_pelajaran');
            $table->string('hari');
            $table->time('jam_mulai');
            $table->time('jam_selesai');
            $table->string('ruang');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('jadwal');
    }
};


------------------------------------------------------------
FILE: database\migrations\2025_08_14_112328_create_zone_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_14_112328_create_zone_table.php
Size: 686 bytes
Last Modified: 08/29/2025 22:29:25
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('zone', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->geometry('polygon')->nullable();
            $table->string('description')->nullable();
            $table->string('color')->default('#3498db');
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('zone');
    }
};


------------------------------------------------------------
FILE: database\migrations\2025_08_14_112418_create_absensi_siswa_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_14_112418_create_absensi_siswa_table.php
Size: 1.23 KB
Last Modified: 08/18/2025 19:48:45
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('absensi_siswa', function (Blueprint $table) {
            $table->id();

            // relasi ke tabel users
            $table->foreignId('siswa_id')
                ->constrained('users')
                ->onDelete('cascade');

            // relasi ke tabel jadwal
            $table->foreignId('jadwal_id')
                ->nullable()
                ->constrained('jadwal')
                ->onDelete('set null');

            $table->timestamp('waktu');
            $table->string('foto_path')->nullable();
            $table->decimal('lat', 10, 7)->nullable();
            $table->decimal('lng', 10, 7)->nullable();
            $table->boolean('valid_zona')->default(false);
            $table->json('device_info')->nullable();
            $table->text('keterangan')->nullable();

            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('absensi_siswa');
    }
};



------------------------------------------------------------
FILE: database\migrations\2025_08_14_113907_create_absensi_guru_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_14_113907_create_absensi_guru_table.php
Size: 954 bytes
Last Modified: 09/01/2025 08:50:19
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('absensi_guru', function (Blueprint $table) {
            $table->id();
            $table->foreignId('guru_id')->constrained('users')->onDelete('cascade');
            $table->date('tanggal')->default(now());
            $table->time('jam_masuk')->nullable();
            $table->time('jam_keluar')->nullable();
            $table->string('status')->default('hadir');
            $table->string('keterangan')->default(''); // Default value string kosong
            $table->decimal('latitude', 10, 8)->nullable();
            $table->decimal('longitude', 11, 8)->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('absensi_guru');
    }
};


------------------------------------------------------------
FILE: database\migrations\2025_08_14_113951_add_wali_kelas_to_kelas_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_14_113951_add_wali_kelas_to_kelas_table.php
Size: 530 bytes
Last Modified: 08/14/2025 18:39:51
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('kelas', function (Blueprint $table) {
            //
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('kelas', function (Blueprint $table) {
            //
        });
    }
};



------------------------------------------------------------
FILE: database\migrations\2025_08_14_114602_create_kelas_user_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_14_114602_create_kelas_user_table.php
Size: 718 bytes
Last Modified: 08/22/2025 17:05:22
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('kelas_user', function (Blueprint $table) {
            $table->id();
            $table->foreignId('kelas_id')->constrained('kelas')->onDelete('cascade');
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade');
            $table->timestamps();
            $table->unique(['kelas_id','user_id']); // supaya 1 user tidak bisa dobel di kelas sama
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('kelas_user');
    }
};



------------------------------------------------------------
FILE: database\migrations\2025_08_14_114724_create_bk_followup_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_14_114724_create_bk_followup_table.php
Size: 539 bytes
Last Modified: 08/14/2025 18:47:24
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('bk_followup', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('bk_followup');
    }
};



------------------------------------------------------------
FILE: database\migrations\2025_08_23_101404_add_location_to_absensi_tables.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_23_101404_add_location_to_absensi_tables.php
Size: 854 bytes
Last Modified: 08/23/2025 17:14:33
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('absensi_siswa', function (Blueprint $table) {
            $table->decimal('latitude', 10, 7)->nullable();
            $table->decimal('longitude', 10, 7)->nullable();
        });

        Schema::table('absensi_guru', function (Blueprint $table) {
            $table->decimal('latitude', 10, 7)->nullable();
            $table->decimal('longitude', 10, 7)->nullable();
        });
    }


    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('absensi_siswa', function (Blueprint $table) {
            //
        });
    }
};


------------------------------------------------------------
FILE: database\migrations\2025_08_23_102858_create_personal_access_tokens_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_23_102858_create_personal_access_tokens_table.php
Size: 863 bytes
Last Modified: 08/23/2025 17:28:57
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->text('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable()->index();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};



------------------------------------------------------------
FILE: database\migrations\2025_08_26_174819_create_telescope_entries_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_26_174819_create_telescope_entries_table.php
Size: 2.02 KB
Last Modified: 08/27/2025 00:48:18
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Get the migration connection name.
     */
    public function getConnection(): ?string
    {
        return config('telescope.storage.database.connection');
    }

    /**
     * Run the migrations.
     */
    public function up(): void
    {
        $schema = Schema::connection($this->getConnection());

        $schema->create('telescope_entries', function (Blueprint $table) {
            $table->bigIncrements('sequence');
            $table->uuid('uuid');
            $table->uuid('batch_id');
            $table->string('family_hash')->nullable();
            $table->boolean('should_display_on_index')->default(true);
            $table->string('type', 20);
            $table->longText('content');
            $table->dateTime('created_at')->nullable();

            $table->unique('uuid');
            $table->index('batch_id');
            $table->index('family_hash');
            $table->index('created_at');
            $table->index(['type', 'should_display_on_index']);
        });

        $schema->create('telescope_entries_tags', function (Blueprint $table) {
            $table->uuid('entry_uuid');
            $table->string('tag');

            $table->primary(['entry_uuid', 'tag']);
            $table->index('tag');

            $table->foreign('entry_uuid')
                ->references('uuid')
                ->on('telescope_entries')
                ->onDelete('cascade');
        });

        $schema->create('telescope_monitoring', function (Blueprint $table) {
            $table->string('tag')->primary();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        $schema = Schema::connection($this->getConnection());

        $schema->dropIfExists('telescope_entries_tags');
        $schema->dropIfExists('telescope_entries');
        $schema->dropIfExists('telescope_monitoring');
    }
};



------------------------------------------------------------
FILE: database\migrations\2025_08_27_092603_create_siswa_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_27_092603_create_siswa_table.php
Size: 808 bytes
Last Modified: 08/27/2025 16:26:15
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('siswa', function (Blueprint $table) { // Perhatikan: 'siswa' tanpa "s"
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->string('nis')->unique();
            $table->string('nama');
            $table->enum('kelas', ['X', 'XI', 'XII']);
            $table->enum('jurusan', ['RPL', 'TKJ', 'TKRO', 'TBSM']);
            $table->string('no_hp_ortu')->nullable();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('siswa'); // Tanpa "s"
    }
};



------------------------------------------------------------
FILE: database\migrations\2025_08_29_114542_add_columns_to_zone_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_08_29_114542_add_columns_to_zone_table.php
Size: 1.36 KB
Last Modified: 08/31/2025 12:42:10
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table(
            'zone',
            function (Blueprint $table) {
                if (!Schema::hasColumn('zone', 'name')) {
                    $table->string('name')->after('id');
                }
                if (!Schema::hasColumn('zone', 'polygon')) {
                    $table->geometry('polygon')->nullable()->after('name');
                }
                if (!Schema::hasColumn('zone', 'description')) {
                    $table->string('description')->nullable()->after('polygon');
                }
                if (!Schema::hasColumn('zone', 'color')) {
                    $table->string('color')->default('#3498db')->after('description');
                }
                if (!Schema::hasColumn('zone', 'is_active')) {
                    $table->boolean('is_active')->default(true)->after('color');
                }
            }
        );
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('zone', function (Blueprint $table) {
            $table->dropColumn(['polygon', 'description', 'color', 'is_active']);
        });
    }
};


------------------------------------------------------------
FILE: database\migrations\2025_09_01_044325_create_notifications_table.php
Path: D:\smk_monitoring_app\database\migrations\2025_09_01_044325_create_notifications_table.php
Size: 726 bytes
Last Modified: 09/01/2025 11:43:25
------------------------------------------------------------
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('notifications', function (Blueprint $table) {
            $table->uuid('id')->primary();
            $table->string('type');
            $table->morphs('notifiable');
            $table->text('data');
            $table->timestamp('read_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('notifications');
    }
};



------------------------------------------------------------
FILE: database\seeders\AbsensiSeeder.php
Path: D:\smk_monitoring_app\database\seeders\AbsensiSeeder.php
Size: 1.03 KB
Last Modified: 08/22/2025 18:20:10
------------------------------------------------------------
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\AbsensiGuru;
use App\Models\AbsensiSiswa;
use App\Models\User;
use App\Models\Jadwal;

class AbsensiSeeder extends Seeder
{
    public function run(): void
    {
        $guru = User::role('guru')->first();
        $siswa = User::role('siswa')->first();
        $jadwal = Jadwal::first();

        // Absensi Guru
        AbsensiGuru::create([
            'guru_id' => $guru->id,
            'tanggal' => now()->toDateString(),
            'status' => 'hadir',
            'keterangan' => 'Masuk tepat waktu',
        ]);

        // Absensi Siswa
        AbsensiSiswa::create([
            'siswa_id' => $siswa->id,
            'jadwal_id' => $jadwal->id,
            'waktu' => now(),
            'foto_path' => 'absensi/foto1.jpg',
            'lat' => '-7.2504450',
            'lng' => '112.7688450',
            'valid_zona' => true,
            'device_info' => ['browser' => 'Chrome', 'os' => 'Windows'],
            'keterangan' => 'Hadir',
        ]);
    }
}



------------------------------------------------------------
FILE: database\seeders\DatabaseSeeder.php
Path: D:\smk_monitoring_app\database\seeders\DatabaseSeeder.php
Size: 625 bytes
Last Modified: 08/23/2025 18:30:47
------------------------------------------------------------
<?php

namespace Database\Seeders;

use App\Models\User;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        $this->call([
            RolePermissionSeeder::class,
            UserSeeder::class,
            KelasSeeder::class,
            JurusanSeeder::class,
            JadwalSeeder::class,
            AbsensiSeeder::class,
        ]);


        // User dummy tambahan
        User::factory()->create([
            'name' => 'Test User',
            'email' => 'test@example.com',
        ]);
    }
}


------------------------------------------------------------
FILE: database\seeders\JadwalSeeder.php
Path: D:\smk_monitoring_app\database\seeders\JadwalSeeder.php
Size: 4.61 KB
Last Modified: 08/31/2025 18:07:57
------------------------------------------------------------
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Jadwal;
use App\Models\Kelas;
use App\Models\Jurusan;
use App\Models\User;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\DB;

class JadwalSeeder extends Seeder
{
    public function run(): void
    {
        // 1. Pastikan data dasar sudah ada
        if (!Kelas::exists() || !Jurusan::exists()) {
            $this->command->warn('⚠️ Seeder Jadwal gagal: Kelas atau Jurusan belum ada.');
            $this->command->info('💡 Silakan jalankan seeder Kelas dan Jurusan terlebih dahulu.');
            return;
        }

        // 2. Ambil guru dengan role yang benar
        $gurus = User::role('guru')->get();
        if ($gurus->isEmpty()) {
            $this->command->warn('⚠️ Seeder Jadwal gagal: Tidak ada user dengan role guru.');
            $this->command->info('💡 Silakan buat user dengan role guru terlebih dahulu.');
            return;
        }

        // 3. Buat jadwal pelajaran untuk semua kelas
        $this->buatJadwalPelajaran($gurus);

        // 4. Buat event untuk kalender sekolah
        $this->buatEventSekolah($gurus);

        $this->command->info('✅ Seeder Jadwal berhasil dijalankan!');
    }

    private function buatJadwalPelajaran($gurus)
    {
        $kelas = Kelas::all();
        $jurusan = Jurusan::all();
        $mataPelajaran = [
            'Matematika',
            'Bahasa Indonesia',
            'Bahasa Inggris',
            'IPA',
            'IPS',
            'Seni Budaya',
            'PJOK',
            'PPKn',
            'TIK',
            'Agama'
        ];

        $hari = ['senin', 'selasa', 'rabu', 'kamis', 'jumat'];
        $today = Carbon::today();

        $totalPelajaran = 0;

        foreach ($kelas as $k) {
            foreach ($hari as $day) {
                // Hitung tanggal untuk hari ini + offset
                $dayOfWeek = array_search($day, ['senin', 'selasa', 'rabu', 'kamis', 'jumat', 'sabtu', 'minggu']);
                $date = $today->copy()->next($dayOfWeek + 1);

                // Buat 4 pelajaran per hari
                for ($i = 1; $i <= 4; $i++) {
                    $jamMulai = sprintf('%02d:00:00', 7 + ($i - 1) * 2);
                    $jamSelesai = sprintf('%02d:30:00', 8 + ($i - 1) * 2);

                    Jadwal::create([
                        'judul_event' => $mataPelajaran[array_rand($mataPelajaran)],
                        'deskripsi' => 'Pembelajaran ' . $mataPelajaran[array_rand($mataPelajaran)] . ' untuk kelas ' . $k->nama,
                        'tanggal' => $date->format('Y-m-d'),
                        'jam_mulai' => $jamMulai,
                        'jam_selesai' => $jamSelesai,
                        'guru_id' => $gurus->random()->id,
                        'kelas_id' => $k->id,
                        'jurusan_id' => $jurusan->random()->id,
                        'jenjang' => $k->jenjang,
                        'tipe' => 'pelajaran',
                    ]);

                    $totalPelajaran++;
                }
            }
        }

        $this->command->info(" • {$totalPelajaran} jadwal pelajaran berhasil dibuat");
    }

    private function buatEventSekolah($gurus)
    {
        $kelas = Kelas::all();
        $jurusan = Jurusan::all();

        $eventTypes = [
            'Pelatihan' => 'Pelatihan penggunaan laboratorium komputer',
            'Seminar' => 'Seminar karir dengan alumni',
            'Lomba' => 'Lomba cerdas cermat antar kelas',
            'Ekstrakurikuler' => 'Ekstrakurikuler pramuka',
            'Kegiatan' => 'Kegiatan bakti sosial',
            'Ujian' => 'Ujian tengah semester',
            'Pertemuan' => 'Pertemuan orang tua murid'
        ];

        $totalEvent = 0;
        $today = Carbon::today();

        // Buat 15 event untuk 30 hari ke depan
        for ($i = 0; $i < 15; $i++) {
            $randomDate = $today->copy()->addDays(rand(1, 30));
            $eventType = array_rand($eventTypes);

            Jadwal::create([
                'judul_event' => $eventType,
                'deskripsi' => $eventTypes[$eventType],
                'tanggal' => $randomDate->format('Y-m-d'),
                'jam_mulai' => sprintf('%02d:00:00', rand(8, 15)),
                'jam_selesai' => sprintf('%02d:00:00', rand(16, 18)),
                'guru_id' => $gurus->random()->id,
                'kelas_id' => $kelas->random()->id,
                'jurusan_id' => $jurusan->random()->id,
                'jenjang' => strval(rand(10, 12)),
                'tipe' => 'event',
            ]);

            $totalEvent++;
        }

        $this->command->info(" • {$totalEvent} event sekolah berhasil dibuat");
    }
}


------------------------------------------------------------
FILE: database\seeders\JurusanSeeder.php
Path: D:\smk_monitoring_app\database\seeders\JurusanSeeder.php
Size: 357 bytes
Last Modified: 08/22/2025 17:11:05
------------------------------------------------------------
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Jurusan;

class JurusanSeeder extends Seeder
{
    public function run(): void
    {
        Jurusan::create(['nama' => 'Rekayasa Perangkat Lunak']);
        Jurusan::create(['nama' => 'Teknik Jaringan Komputer']);
        Jurusan::create(['nama' => 'Multimedia']);
    }
}



------------------------------------------------------------
FILE: database\seeders\KelasSeeder.php
Path: D:\smk_monitoring_app\database\seeders\KelasSeeder.php
Size: 476 bytes
Last Modified: 08/21/2025 16:30:19
------------------------------------------------------------
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Kelas;

class KelasSeeder extends Seeder
{
    public function run(): void
    {
        Kelas::create([
            'nama' => 'X RPL 1',
            'tingkat' => '10',
        ]);

        Kelas::create([
            'nama' => 'XI RPL 1',
            'tingkat' => '11',
        ]);

        Kelas::create([
            'nama' => 'XII RPL 1',
            'tingkat' => '12',
        ]);
    }
}


------------------------------------------------------------
FILE: database\seeders\RolePermissionSeeder.php
Path: D:\smk_monitoring_app\database\seeders\RolePermissionSeeder.php
Size: 2.39 KB
Last Modified: 09/02/2025 17:23:32
------------------------------------------------------------
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;

class RolePermissionSeeder extends Seeder
{
    public function run()
    {
        // Buat permissions (hanya jika belum ada)
        $permissions = [
            // Absensi
            'absensi-siswa-create',
            'absensi-siswa-view',
            'absensi-guru-create',
            'absensi-guru-view',
            'absensi-bk-view',

            // Zona
            'zona-manage',
            'zona-view',

            // Pelanggaran
            'pelanggaran-create',
            'pelanggaran-view',
            'pelanggaran-manage',

            // Kelas
            'kelas-view',
            'kelas-manage',

            // Jadwal
            'jadwal-view',
            'jadwal-manage',

            // User
            'user-view',
            'user-manage',
        ];

        foreach ($permissions as $permission) {
            Permission::firstOrCreate(['name' => $permission]);
        }

        // Buat role dan assign permissions (hanya jika belum ada)
        $siswa = Role::firstOrCreate(['name' => 'siswa']);
        $siswa->syncPermissions([
            'absensi-siswa-create',
            'absensi-siswa-view',
            'jadwal-view',
            'kelas-view'
        ]);

        $guru = Role::firstOrCreate(['name' => 'guru']);
        $guru->syncPermissions([
            'absensi-guru-create',
            'absensi-guru-view',
            'absensi-siswa-view',
            'pelanggaran-create',
            'jadwal-view',
            'kelas-view'
        ]);

        $it = Role::firstOrCreate(['name' => 'it']);
        $it->syncPermissions([
            'zona-manage',
            'absensi-guru-view',
            'absensi-siswa-view',
            'pelanggaran-view',
            'kelas-manage',
            'user-manage'
        ]);

        $bk = Role::firstOrCreate(['name' => 'bk']);
        $bk->syncPermissions([
            'pelanggaran-view',
            'pelanggaran-manage',
            'absensi-siswa-view',
            'absensi-guru-view',
            'jadwal-view',
            'kelas-view'
        ]);

        // Assign role default ke user admin (hanya jika belum memiliki role)
        $user = \App\Models\User::first();
        if ($user && !$user->hasRole(['siswa', 'guru', 'it', 'bk'])) {
            $user->assignRole('it');
        }
    }
}


------------------------------------------------------------
FILE: database\seeders\UserSeeder.php
Path: D:\smk_monitoring_app\database\seeders\UserSeeder.php
Size: 1.95 KB
Last Modified: 09/02/2025 17:16:17
------------------------------------------------------------
<?php

namespace Database\Seeders;

use App\Models\Kelas;
use App\Models\User;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

class UserSeeder extends Seeder
{
    public function run()
    {
        // Pastikan kelas ada
        if (Kelas::count() === 0) {
            Kelas::create([
                'nama_kelas' => 'XII RPL 1',
                'jurusan' => 'Rekayasa Perangkat Lunak',
                'wali_kelas' => 'Guru Wali'
            ]);
        }

        // Admin/IT
        User::create([
            'name' => 'Admin IT',
            'email' => 'admin.it@gmail.com',
            'password' => Hash::make('password'),
        ])->assignRole('it');

        User::create([
            'name' => 'Teknisi 1',
            'email' => 'teknisi1.teknisi@gmail.com',
            'password' => Hash::make('password'),
        ])->assignRole('it');

        // Guru
        User::create([
            'name' => 'Guru Matematika',
            'email' => 'guru1.guru@gmail.com',
            'password' => Hash::make('password'),
        ])->assignRole('guru');

        User::create([
            'name' => 'Pengajar IPA',
            'email' => 'guru2.pengajar@gmail.com',
            'password' => Hash::make('password'),
        ])->assignRole('guru');

        // BK
        User::create([
            'name' => 'BK Utama',
            'email' => 'bk1.bk@gmail.com',
            'password' => Hash::make('password'),
        ])->assignRole('bk');

        User::create([
            'name' => 'Konselor',
            'email' => 'konseling1.konseling@gmail.com',
            'password' => Hash::make('password'),
        ])->assignRole('bk');

        // Siswa
        for ($i = 1; $i <= 10; $i++) {
            User::create([
                'name' => 'Siswa ' . $i,
                'email' => 'siswa' . $i . '.siswa@gmail.com',
                'password' => Hash::make('password'),
            ])->assignRole('siswa');
        }
    }
}


------------------------------------------------------------
FILE: database\seeders\ZonaSeeder.php
Path: D:\smk_monitoring_app\database\seeders\ZonaSeeder.php
Size: 924 bytes
Last Modified: 08/29/2025 22:05:17
------------------------------------------------------------
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Zona;

class ZonaSeeder extends Seeder
{
    public function run()
    {
        // Koordinat zona sekolah (ganti dengan koordinat sebenarnya)
        $coordinates = [
            [106.827153, -6.175392], // longitude, latitude
            [106.827200, -6.175400],
            [106.827180, -6.175410],
            [106.827153, -6.175392] // kembali ke titik awal
        ];

        // Format WKT untuk polygon
        $wktPolygon = 'POLYGON((' .
            implode(', ', array_map(function ($coord) {
                return $coord[0] . ' ' . $coord[1];
            }, $coordinates)) .
            '))';

        // Buat zona sekolah
        Zona::create([
            'name' => 'Sekolah SMK',
            'polygon' => \DB::raw("ST_GeomFromText('{$wktPolygon}', 4326)"),
            'description' => 'Zona sekolah utama'
        ]);
    }
}


------------------------------------------------------------
FILE: public\index.php
Path: D:\smk_monitoring_app\public\index.php
Size: 543 bytes
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

use Illuminate\Foundation\Application;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';

// Bootstrap Laravel and handle the request...
/** @var Application $app */
$app = require_once __DIR__.'/../bootstrap/app.php';

$app->handleRequest(Request::capture());



------------------------------------------------------------
FILE: resources\views\app.blade.php
Path: D:\smk_monitoring_app\resources\views\app.blade.php
Size: 700 bytes
Last Modified: 08/11/2025 12:26:00
------------------------------------------------------------
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title inertia>{{ config('app.name', 'Laravel') }}</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

        <!-- Scripts -->
        @routes
        @vite(['resources/js/app.js', "resources/js/Pages/{$page['component']}.vue"])
        @inertiaHead
    </head>
    <body class="font-sans antialiased">
        @inertia
    </body>
</html>



------------------------------------------------------------
FILE: routes\api.php
Path: D:\smk_monitoring_app\routes\api.php
Size: 3.59 KB
Last Modified: 09/02/2025 17:20:49
------------------------------------------------------------
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Api\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Api\AbsensiGuruController;
use App\Http\Controllers\Api\AbsensiSiswaController;
use App\Http\Controllers\Api\CatatanPelanggaranController;
use App\Http\Controllers\Api\JadwalController;
use App\Http\Controllers\Api\DashboardController;
use App\Http\Controllers\Api\NotificationController;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Semua route API ada di sini. Pastikan setiap route menggunakan middleware
| yang sesuai agar aman.
|
*/

// --------------------
// AUTHENTICATION
// --------------------
Route::post('/login', [AuthenticatedSessionController::class, 'store']);
Route::post('/logout', [AuthenticatedSessionController::class, 'destroy'])
    ->middleware('auth:sanctum');

// --------------------
// USER INFO
// --------------------
Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return response()->json([
        'id'    => $request->user()->id,
        'name'  => $request->user()->name,
        'email' => $request->user()->email,
        'roles' => $request->user()->getRoleNames(),
    ]);
});

// --------------------
// ABSENSI (SISWA)
// --------------------
Route::middleware(['auth:sanctum', 'role:siswa'])->group(function () {
    Route::post('/absen/siswa', [AbsensiSiswaController::class, 'absenSiswa']);
});

// --------------------
// ABSENSI (GURU)
// --------------------
Route::middleware(['auth:sanctum', 'role:guru'])->group(function () {
    Route::post('/absen/guru/masuk', [AbsensiGuruController::class, 'absenMasuk']);
    Route::post('/absen/guru/pulang', [AbsensiGuruController::class, 'absenPulang']);
});

// --------------------
// CATATAN PELANGGARAN (GURU & BK)
// --------------------
// Solusi: Gunakan middleware role dengan sintaks yang benar untuk versi 6.x
Route::middleware(['auth:sanctum', 'role:guru,bk'])->group(function () {
    Route::get('/catatan-pelanggaran', [CatatanPelanggaranController::class, 'index']);
    Route::post('/catatan-pelanggaran', [CatatanPelanggaranController::class, 'store']);
    Route::put('/catatan-pelanggaran/{id}', [CatatanPelanggaranController::class, 'update']);
});

// --------------------
// JADWAL PELAJARAN
// --------------------
// Solusi: Gunakan sintaks role yang benar untuk versi 6.x
Route::middleware(['auth:sanctum', 'role:guru,admin'])->group(function () {
    Route::get('/jadwal', [JadwalController::class, 'index']);

    // Hanya admin yang bisa mengelola jadwal
    Route::middleware('role:admin')->group(function () {
        Route::post('/jadwal', [JadwalController::class, 'store']);
        Route::put('/jadwal/{id}', [JadwalController::class, 'update']);
        Route::delete('/jadwal/{id}', [JadwalController::class, 'destroy']);
    });
});

// --------------------
// DASHBOARD
// --------------------
// Solusi: Gunakan sintaks role yang benar untuk versi 6.x
Route::middleware(['auth:sanctum', 'role:siswa,guru,bk,admin'])->group(function () {
    Route::get('/dashboard', [DashboardController::class, 'index']);
});

// --------------------
// NOTIFIKASI
// --------------------
Route::middleware('auth:sanctum')->group(function () {
    Route::get('/notifications/unread', [NotificationController::class, 'unread']);
    Route::post('/notifications/{id}/mark-as-read', [NotificationController::class, 'markAsRead']);
    Route::post('/notifications/mark-all-as-read', [NotificationController::class, 'markAllAsRead']);
});


------------------------------------------------------------
FILE: routes\auth.php
Path: D:\smk_monitoring_app\routes\auth.php
Size: 1.34 KB
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\EmailVerificationNotificationController;
use App\Http\Controllers\Auth\NewPasswordController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\VerifyEmailController;
use Illuminate\Support\Facades\Route;

Route::post('/register', [RegisteredUserController::class, 'store'])
    ->middleware('guest')
    ->name('register');

Route::post('/login', [AuthenticatedSessionController::class, 'store'])
    ->middleware('guest')
    ->name('login');

Route::post('/forgot-password', [PasswordResetLinkController::class, 'store'])
    ->middleware('guest')
    ->name('password.email');

Route::post('/reset-password', [NewPasswordController::class, 'store'])
    ->middleware('guest')
    ->name('password.store');

Route::get('/verify-email/{id}/{hash}', VerifyEmailController::class)
    ->middleware(['auth', 'signed', 'throttle:6,1'])
    ->name('verification.verify');

Route::post('/email/verification-notification', [EmailVerificationNotificationController::class, 'store'])
    ->middleware(['auth', 'throttle:6,1'])
    ->name('verification.send');

Route::post('/logout', [AuthenticatedSessionController::class, 'destroy'])
    ->middleware('auth')
    ->name('logout');



------------------------------------------------------------
FILE: routes\channels.php
Path: D:\smk_monitoring_app\routes\channels.php
Size: 471 bytes
Last Modified: 09/01/2025 11:38:30
------------------------------------------------------------
<?php

use App\Models\User;
use Illuminate\Support\Facades\Broadcast;

Broadcast::channel('absensi.terlambat.{userId}', function (User $user, $userId) {
    return (int) $user->id === (int) $userId;
});

Broadcast::channel('pelanggaran.baru.{userId}', function (User $user, $userId) {
    return (int) $user->id === (int) $userId;
});

Broadcast::channel('jadwal.akan-dimulai.{userId}', function (User $user, $userId) {
    return (int) $user->id === (int) $userId;
});



------------------------------------------------------------
FILE: routes\console.php
Path: D:\smk_monitoring_app\routes\console.php
Size: 210 bytes
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');



------------------------------------------------------------
FILE: routes\web.php
Path: D:\smk_monitoring_app\routes\web.php
Size: 154 bytes
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

use Illuminate\Support\Facades\Route;

Route::get('/', function () {
    return ['Laravel' => app()->version()];
});

require __DIR__.'/auth.php';



------------------------------------------------------------
FILE: tests\Feature\Auth\AuthenticationTest.php
Path: D:\smk_monitoring_app\tests\Feature\Auth\AuthenticationTest.php
Size: 1.05 KB
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AuthenticationTest extends TestCase
{
    use RefreshDatabase;

    public function test_users_can_authenticate_using_the_login_screen(): void
    {
        $user = User::factory()->create();

        $response = $this->post('/login', [
            'email' => $user->email,
            'password' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertNoContent();
    }

    public function test_users_can_not_authenticate_with_invalid_password(): void
    {
        $user = User::factory()->create();

        $this->post('/login', [
            'email' => $user->email,
            'password' => 'wrong-password',
        ]);

        $this->assertGuest();
    }

    public function test_users_can_logout(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/logout');

        $this->assertGuest();
        $response->assertNoContent();
    }
}



------------------------------------------------------------
FILE: tests\Feature\Auth\EmailVerificationTest.php
Path: D:\smk_monitoring_app\tests\Feature\Auth\EmailVerificationTest.php
Size: 1.36 KB
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\URL;
use Tests\TestCase;

class EmailVerificationTest extends TestCase
{
    use RefreshDatabase;

    public function test_email_can_be_verified(): void
    {
        $user = User::factory()->unverified()->create();

        Event::fake();

        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1($user->email)]
        );

        $response = $this->actingAs($user)->get($verificationUrl);

        Event::assertDispatched(Verified::class);
        $this->assertTrue($user->fresh()->hasVerifiedEmail());
        $response->assertRedirect(config('app.frontend_url').'/dashboard?verified=1');
    }

    public function test_email_is_not_verified_with_invalid_hash(): void
    {
        $user = User::factory()->unverified()->create();

        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1('wrong-email')]
        );

        $this->actingAs($user)->get($verificationUrl);

        $this->assertFalse($user->fresh()->hasVerifiedEmail());
    }
}



------------------------------------------------------------
FILE: tests\Feature\Auth\PasswordResetTest.php
Path: D:\smk_monitoring_app\tests\Feature\Auth\PasswordResetTest.php
Size: 1.30 KB
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Auth\Notifications\ResetPassword;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;

class PasswordResetTest extends TestCase
{
    use RefreshDatabase;

    public function test_reset_password_link_can_be_requested(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class);
    }

    public function test_password_can_be_reset_with_valid_token(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class, function (object $notification) use ($user) {
            $response = $this->post('/reset-password', [
                'token' => $notification->token,
                'email' => $user->email,
                'password' => 'password',
                'password_confirmation' => 'password',
            ]);

            $response
                ->assertSessionHasNoErrors()
                ->assertStatus(200);

            return true;
        });
    }
}



------------------------------------------------------------
FILE: tests\Feature\Auth\PasswordUpdateTest.php
Path: D:\smk_monitoring_app\tests\Feature\Auth\PasswordUpdateTest.php
Size: 1.36 KB
Last Modified: 08/11/2025 12:26:00
------------------------------------------------------------
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class PasswordUpdateTest extends TestCase
{
    use RefreshDatabase;

    public function test_password_can_be_updated(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->put('/password', [
                'current_password' => 'password',
                'password' => 'new-password',
                'password_confirmation' => 'new-password',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $this->assertTrue(Hash::check('new-password', $user->refresh()->password));
    }

    public function test_correct_password_must_be_provided_to_update_password(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->put('/password', [
                'current_password' => 'wrong-password',
                'password' => 'new-password',
                'password_confirmation' => 'new-password',
            ]);

        $response
            ->assertSessionHasErrors('current_password')
            ->assertRedirect('/profile');
    }
}



------------------------------------------------------------
FILE: tests\Feature\Auth\RegistrationTest.php
Path: D:\smk_monitoring_app\tests\Feature\Auth\RegistrationTest.php
Size: 551 bytes
Last Modified: 08/27/2025 00:28:58
------------------------------------------------------------
<?php

namespace Tests\Feature\Auth;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class RegistrationTest extends TestCase
{
    use RefreshDatabase;

    public function test_new_users_can_register(): void
    {
        $response = $this->post('/register', [
            'name' => 'Test User',
            'email' => 'test@example.com',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertNoContent();
    }
}



------------------------------------------------------------
FILE: tests\Feature\ExampleTest.php
Path: D:\smk_monitoring_app\tests\Feature\ExampleTest.php
Size: 359 bytes
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}



------------------------------------------------------------
FILE: tests\Feature\ProfileTest.php
Path: D:\smk_monitoring_app\tests\Feature\ProfileTest.php
Size: 2.42 KB
Last Modified: 08/11/2025 12:26:00
------------------------------------------------------------
<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ProfileTest extends TestCase
{
    use RefreshDatabase;

    public function test_profile_page_is_displayed(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->get('/profile');

        $response->assertOk();
    }

    public function test_profile_information_can_be_updated(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->patch('/profile', [
                'name' => 'Test User',
                'email' => 'test@example.com',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $user->refresh();

        $this->assertSame('Test User', $user->name);
        $this->assertSame('test@example.com', $user->email);
        $this->assertNull($user->email_verified_at);
    }

    public function test_email_verification_status_is_unchanged_when_the_email_address_is_unchanged(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->patch('/profile', [
                'name' => 'Test User',
                'email' => $user->email,
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $this->assertNotNull($user->refresh()->email_verified_at);
    }

    public function test_user_can_delete_their_account(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->delete('/profile', [
                'password' => 'password',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/');

        $this->assertGuest();
        $this->assertNull($user->fresh());
    }

    public function test_correct_password_must_be_provided_to_delete_account(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->delete('/profile', [
                'password' => 'wrong-password',
            ]);

        $response
            ->assertSessionHasErrors('password')
            ->assertRedirect('/profile');

        $this->assertNotNull($user->fresh());
    }
}



------------------------------------------------------------
FILE: tests\Unit\ExampleTest.php
Path: D:\smk_monitoring_app\tests\Unit\ExampleTest.php
Size: 243 bytes
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_that_true_is_true(): void
    {
        $this->assertTrue(true);
    }
}



------------------------------------------------------------
FILE: tests\TestCase.php
Path: D:\smk_monitoring_app\tests\TestCase.php
Size: 142 bytes
Last Modified: 08/03/2025 21:58:20
------------------------------------------------------------
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    //
}



================================================================================
TOTAL FILES IN CATEGORY: 106
================================================================================
